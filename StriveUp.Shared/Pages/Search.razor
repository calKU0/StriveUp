@page "/search"

<!-- Usings -->
@using StriveUp.Shared.DTOs

<!-- Injections -->
@inject IFollowService FollowService
@inject NavigationManager Navigation
@inject ICustomAuthStateProvider AuthStateProvider

<PageTitle>Search Users</PageTitle>

<div class="container py-5">
    <div class="shadow-sm rounded">
        <div class="text-center mb-4">
            <h2>Find and Follow Users</h2>
            <p class="text-muted">Search for people on the platform to view their profiles and connect with them.</p>

            <div class="mb-4">
                <div class="input-group">
                    <div class="search-wrapper mb-4 position-relative">
                        <i class="bi bi-search search-icon"></i>
                        <input type="text"
                               class="form-control search-input"
                               placeholder="Search users..."
                               @oninput="HandleInput" />
                    </div>
                </div>
            </div>
        </div>
    </div>


    @if (isLoading)
    {
        <div class="text-center my-5">
            <Spinner></Spinner>
        </div>
    }
    else if (searchResults?.Any() == true)
    {
        <div class="list-group shadow-sm rounded">
            @foreach (var user in searchResults)
            {
                <div class="list-group-item list-group-item-action user-list-item d-flex justify-content-between align-items-center py-3"
                     @onclick="() => OnListItemClick(user.UserName)">
                    <div class="d-flex align-items-center">
                        <img src="@GetAvatar(user.Avatar)" class="rounded-circle me-3 border" width="48" height="48" />
                        <div>
                            <strong class="d-block">@user.FullName</strong>
                            <span class="text-muted">@user.UserName</span>
                        </div>
                    </div>
                    <button class="btn btn-sm @(user.IsFollowed ? "btn-outline-danger" : "btn-primary")"
                            @onclick:stopPropagation
                            @onclick="@(() => ToggleFollow(user))">
                        @(user.IsFollowed ? "Unfollow" : "Follow")
                    </button>
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(searchText))
    {
        <div class="text-center mt-4 text-muted">
            <em>No users found matching "@searchText".</em>
        </div>
    }

    <ErrorToast Message="@followErrorMessage"></ErrorToast>
</div>

@code {
    private string searchText = "";
    private List<UserFollowDto> searchResults = new();
    private bool isLoading = false;
    private string followErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (!currentUser.Identity?.IsAuthenticated ?? true)
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        await OnSearchChanged();
    }

    private async Task OnSearchChanged()
    {
        if (string.IsNullOrWhiteSpace(searchText) || searchText.Length < 2)
        {
            searchResults.Clear();
            return;
        }

        isLoading = true;
        try
        {
            searchResults = await FollowService.SearchUsersAsync(searchText);
        }
        catch (Exception ex)
        {
            followErrorMessage = "An error occurred while searching. Please try again.";
            Console.WriteLine($"Search error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ToggleFollow(UserFollowDto user)
    {
        bool originalFollowState = user.IsFollowed;
        user.IsFollowed = !originalFollowState;

        try
        {
            bool result;

            if (user.IsFollowed)
            {
                result = await FollowService.FollowAsync(user.UserId);
            }
            else
            {
                result = await FollowService.UnfollowAsync(user.UserId);
            }

            if (!result)
            {
                // Revert if operation failed
                user.IsFollowed = originalFollowState;
                followErrorMessage = $"Error {(user.IsFollowed ? "unfollowing" : "following")} user {user.UserName}. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            // Revert on exception
            user.IsFollowed = originalFollowState;
            followErrorMessage = $"Error toggling follow status for user {user.UserName}. Please try again later.";
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private string GetAvatar(string? avatar) =>
        string.IsNullOrWhiteSpace(avatar) ? "https://via.placeholder.com/48?text=U" : avatar;

    private void OnListItemClick(string userName)
    {
        Navigation.NavigateTo($"/profile/{userName}");
    }
}
