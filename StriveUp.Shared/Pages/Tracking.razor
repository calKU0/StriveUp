@page "/tracking"
@inject IJSRuntime JSRuntime
@inject IActivityService ActivityService
@inject ISecurableService SecurableService
@inject IBleHeartRateService HeartRateService
@inject NavigationManager Navigation

@using Microsoft.Maui
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.Devices.Sensors
@using StriveUp.Shared.Components
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Activity
@using System.Diagnostics
@using Plugin.BLE.Abstractions.Contracts;


@if (isLoadingLocation)
{
    <div class="loading-overlay">
        <div class="spinner"></div>
        <p class="loading-text">Acquiring GPS. Please wait...</p>
    </div>
}

<div class="page-wrapper container-full @(mapVisible ? "map-visible" : "")">
    <div class="slides">
        <div class="map-section">
            <div id="map"></div>
        </div>

        <div class="controls">
            <ActivityControls AvailableActivities="availableActivities"
            SelectedActivity="@selectedActivity"
            IsTracking="@isTracking"
            IsPaused="@isPaused"
            OnSelectedSensorChanged="@(sensor => ConnectHrDevice(sensor))"
            OnStartClick="@ToggleTracking"
            OnStopClick="@ToggleTracking"
            OnResumeClick="@ResumeTracking"
            OnFinishClick="@ShowFinishModal" />
        </div>
    </div>
    @if (isTracking || isPaused)
    {
        <div class="slides" id="tracking-section">
            <div class="tiles-wrapper p-2">
                <!-- Info Tiles -->
                <div class="row g-3">
                    <InfoTile Label="Distance" Value="@($"{Math.Round(Distance, 2):F2} km")" IconClass="fas fa-route" />
                    <!-- Conditional display of Speed or Pace -->
                    <InfoTile Label="@GetSpeedOrPaceLabel()"
                    Value="@GetSpeedOrPace()"
                    IconClass="fas fa-tachometer-alt" />
                    <InfoTile Label="Heart Rate" Value="@($"{HeartRate} bpm")" IconClass="fas fa-heartbeat" />
                    <InfoTile Label="Duration" Value="@Duration.ToString(@"hh\:mm\:ss")" IconClass="fas fa-stopwatch" />
                    <InfoTile Label="Tile 5" Value="--" />
                    <InfoTile Label="Tile 6" Value="--" />
                </div>
            </div>
        </div>
    }

</div>

<FinishModal Show="@showFinishModal"
Duration="@Duration"
Title="@activityTitle"
Description="@activityDescription"
OnSave="@SaveActivityWithMeta"
OnDiscard="@DiscardActivity"
OnResume="@ResumeTracking" />



@code {
    private List<ActivityHrDto> HrData = new();
    private List<ActivitySpeedDto> SpeedData = new();
    private string selectedDeviceId;
    private List<Location> route = new();
    private List<ActivityDto> availableActivities = new();
    private bool isPaused = false;
    private ActivityDto selectedActivity;
    private bool isTracking = false;
    private bool mapVisible = false;
    private bool mapInitialized = false;
    private Location currentLocation;
    private double Distance = 0;
    private double Speed = 0;
    private int HeartRate = 0;
    private TimeSpan Duration = TimeSpan.Zero;
    private DateTime startTime;
    private double currentHeading = 0;
    private CancellationTokenSource durationCts;
    private bool isLoadingLocation = true;
    private string mapToken;
    private bool btPermission = false;
    private bool isSheetExpanded = false;
    private bool isLocationTrackingActive = false;
    private double smoothedSpeed = 0;
    private const double smoothingAlpha = 0.2;
    private Location lastLocation;

    private bool showFinishModal = false;
    private string activityTitle = "My Activity";
    private string activityDescription = "Tracked via GPS";

    // This will be triggered when the page first loads
    protected override async Task OnInitializedAsync()
    {
        StartCompass();

        var status = await Permissions.RequestAsync<Permissions.Bluetooth>();
        if (status != PermissionStatus.Granted)
        {
            btPermission = false;
            return;
        }
        btPermission = true;
        var activities = await ActivityService.GetAvailableActivitiesAsync();
        if (activities != null)
            availableActivities = activities;

        selectedActivity = activities.FirstOrDefault();

        mapToken = await SecurableService.GetMapboxTokenAsync();
        Navigation.LocationChanged += HandleLocationChanged;
        _ = StartLocationTracking(); // Start tracking immediately
    }  

    private async Task StartLocationTracking()
    {
        try
        {
            var status = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();
            if (status != PermissionStatus.Granted)
            {
                isLoadingLocation = false;
                return;
            }

            isLocationTrackingActive = true;

            while (isLocationTrackingActive) 
            {
                var location = await Geolocation.GetLocationAsync(new GeolocationRequest(GeolocationAccuracy.Best));
                if (location != null)
                {
                    currentLocation = location;

                    if (!mapInitialized)
                    {
                        mapInitialized = true;
                        mapVisible = true;
                        await JSRuntime.InvokeVoidAsync("initializeMap", location.Latitude, location.Longitude, mapToken);
                    }

                    await JSRuntime.InvokeVoidAsync("updateMap", currentLocation.Latitude, currentLocation.Longitude, currentHeading, isTracking);
                    isLoadingLocation = false;
                    StateHasChanged();

                    if (isTracking)
                    {
                        UpdateTrackingData(location);
                    }
                }

                await Task.Delay(500);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Location error: " + ex.Message);
            isLoadingLocation = false;
        }
    }


    private void UpdateTrackingData(Location location)
    {
        if (lastLocation != null)
        {
            var distanceDelta = Location.CalculateDistance(lastLocation, location, DistanceUnits.Kilometers);
            var timeDelta = (location.Timestamp - lastLocation.Timestamp).TotalHours;

            if (timeDelta > 0)
            {
                var deltaSpeed = distanceDelta / timeDelta; // km/h
                Speed = ApplyLowPassFilter(deltaSpeed);
            }

            Distance += distanceDelta;
        }

        lastLocation = location;
        route.Add(location);

        SpeedData.Add(new ActivitySpeedDto
        {
            SpeedValue = Speed,
            TimeStamp = DateTime.UtcNow
        });

        // Add heart rate data
        if (HeartRate > 0)
        {
            HrData.Add(new ActivityHrDto
            {
                HearthRateValue = HeartRate,
                TimeStamp = DateTime.UtcNow
            });
        }
    }

    private async Task ConnectHrDevice(BluetoothDeviceDto device)
    {
        selectedDeviceId = device.Id;
        var success = await HeartRateService.ConnectAsync(selectedDeviceId);
        if (success)
        {
            HeartRateService.OnHeartRateChanged += (hr) =>
            {
                if (isTracking)
                {
                    HeartRate = hr;
                    HrData.Add(new ActivityHrDto
                        {
                            HearthRateValue = hr,
                            TimeStamp = DateTime.UtcNow
                        });
                    Debug.WriteLine($"Heart Rate: {hr} bpm");
                }

                InvokeAsync(StateHasChanged);
            };
        }
    }

    private void ToggleSheet()
    {
        isSheetExpanded = !isSheetExpanded;
    }

    private void ToggleTracking()
    {
        if (isTracking)
        {
            _ = StopTracking();
        }
        else
        {
            _ = StartTracking();
            if (!isLocationTrackingActive)
            {
                _ = StartLocationTracking();
            }
        }
    }


    private async Task StartTracking()
    {
        isTracking = true;
        startTime = DateTime.UtcNow;
        route.Clear();
        durationCts = new CancellationTokenSource();
        await InvokeAsync(() => StateHasChanged());

        await JSRuntime.InvokeVoidAsync("scrollToTrackingSection");
        _ = Task.Run(() => UpdateDuration(durationCts.Token)); 
    }


    private async Task UpdateDuration(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            Duration = DateTime.UtcNow - startTime;

            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000, token);
        }
    }

    private async Task StopTracking()
    {
        isTracking = false;
        isPaused = true;
        durationCts?.Cancel();
        StateHasChanged();
    }

    private async Task ResumeTracking()
    {
        isPaused = false;
        showFinishModal = false;
        isTracking = true;
        durationCts = new CancellationTokenSource();

        _ = Task.Run(() => UpdateDuration(durationCts.Token));
    }

    private void ShowFinishModal()
    {
        showFinishModal = true;
    }

    private async Task DiscardActivity()
    {
        await JSRuntime.InvokeVoidAsync("clearRoute");

        showFinishModal = false;
        isPaused = false;
        Distance = 0;
        Speed = 0;
        Duration = TimeSpan.Zero;
        route.Clear();
        StateHasChanged();
    }

    private async Task SaveActivityWithMeta()
    {
        var dto = new CreateUserActivityDto
            {
                Title = activityTitle,
                Description = activityDescription,
                ActivityId = selectedActivity.Id,
                DateStart = startTime,
                DateEnd = DateTime.UtcNow,
                DurationSeconds = Duration.TotalSeconds,
                Route = route.Select(loc => new GeoPointDto
                {
                    Latitude = loc.Latitude,
                    Longitude = loc.Longitude,
                    Timestamp = loc.Timestamp.UtcDateTime,
                }).ToList(),
                Distance = Distance,
                HrData = HrData,
                SpeedData = SpeedData,
            };

        await ActivityService.AddActivityAsync(dto);
        await JSRuntime.InvokeVoidAsync("clearRoute");

        showFinishModal = false;
        isPaused = false;
        Distance = 0;
        Duration = TimeSpan.Zero;
        Speed = 0;
        route.Clear();

        Compass.Default.Stop();
        Compass.Default.ReadingChanged -= OnCompassReadingChanged;

        Navigation.NavigateTo("/feed");
    }

    private void StartCompass()
    {
        if (!Compass.Default.IsSupported)
        {
            return;
        }

        Compass.Default.ReadingChanged += OnCompassReadingChanged;
        Compass.Default.Start(SensorSpeed.UI);
    }

    private void OnCompassReadingChanged(object sender, CompassChangedEventArgs e)
    {
        if (currentLocation == null)
        {
            return;
        }
        JSRuntime.InvokeVoidAsync("updateMap", currentLocation.Latitude, currentLocation.Longitude, currentHeading, isTracking);
        currentHeading = e.Reading.HeadingMagneticNorth;
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // Handle cleanup here if needed (e.g., saving data or canceling tasks)
        Dispose();
    }

    private void Dispose()
    {
        // Unsubscribe when the component is disposed to avoid memory leaks
        Compass.Default.Stop();
        Compass.Default.ReadingChanged -= OnCompassReadingChanged;
    }
    private string GetSpeedOrPace()
    {
        if (selectedActivity.MeasurementType == "pace")
        {
            // If it's pace, return "min/km"
            return $"{Math.Round(Speed, 2):F2} min/km";
        }
        else
        {
            // If it's speed, return "km/h"
            return $"{Math.Round(Speed, 2):F2} km/h";
        }
    }

    private string GetSpeedOrPaceLabel()
    {
        return selectedActivity.MeasurementType == "pace" ? "Pace" : "Speed";
    }

    private double ApplyLowPassFilter(double newSpeed)
    {
        smoothedSpeed = smoothingAlpha * newSpeed + (1 - smoothingAlpha) * smoothedSpeed;
        return smoothedSpeed;
    }
}

