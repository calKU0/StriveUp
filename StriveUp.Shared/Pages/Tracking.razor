@page "/tracking"
@inject IJSRuntime JSRuntime
@inject IActivityService activityService
@using Microsoft.Maui
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.Devices.Sensors
@using StriveUp.Shared.Components
@using StriveUp.Shared.DTOs


@if (isLoadingLocation)
{
    <div class="loading-overlay">
        <div class="spinner"></div>
        <p class="loading-text">Acquiring GPS. Please wait...</p>
    </div>
}

<div class="page-wrapper @(mapVisible ? "map-visible" : "")">
    @if (!isTracking && !isPaused)
    {
        <BackButton />
    }

    <div class="map-section @(!isTracking && !isPaused ? "pt-5" : "")">
        <div id="map"></div>
    </div>

    <div class="controls">
        <ActivityControls AvailableActivities="availableActivities"
        SelectedActivityId="@selectedActivityId"
        IsTracking="@isTracking"
        IsPaused="@isPaused"
        OnStartClick="@ToggleTracking"
        OnStopClick="@ToggleTracking"
        OnResumeClick="@ResumeTracking"
        OnFinishClick="@ShowFinishModal" />
    </div>

    @if (isTracking || isPaused)
    {
        <div id="bottomSheet" class="bottom-sheet ">
            <div class="drag-handle"></div>
        <div class="tiles-wrapper container-fluid flex-grow-1 d-flex align-items-stretch">
            <!-- Info Tiles -->
            <div class="row g-3">
                <InfoTile Label="Distance" Value="@($"{Math.Round(Distance, 2):F2} km")" />
                <InfoTile Label="Speed" Value="@($"{Math.Round(Speed, 2):F2} km/h")" />
                <InfoTile Label="Heart Rate" Value="@($"{HeartRate} bpm")" />
                <InfoTile Label="Duration" Value="@Duration.ToString(@"hh\:mm\:ss")" />
                <InfoTile Label="Tile 5" Value="--" />
                <InfoTile Label="Tile 6" Value="--" />
            </div>
        </div>
    </div>
    }

</div>

<FinishModal Show="@showFinishModal"
             Duration="@Duration"
             Title="@activityTitle"
             Description="@activityDescription"
             OnSave="@SaveActivityWithMeta"
             OnDiscard="@DiscardActivity"
             OnResume="@ResumeTracking" />



@code {
    private List<ActivityDto> availableActivities = new();
    private bool isPaused = false;
    private int selectedActivityId = 4;
    private bool isTracking = false;
    private bool mapVisible = false;
    private bool mapInitialized = false;
    private Location currentLocation;
    private double Distance = 0;
    private double Speed = 0;
    private int HeartRate = 0;
    private TimeSpan Duration = TimeSpan.Zero;
    private DateTime startTime;
    private double currentHeading = 0; // Store the current heading
    private List<Location> route = new();
    private CancellationTokenSource durationCts;
    private bool isLoadingLocation = true;

    private bool showFinishModal = false;
    private string activityTitle = "My Activity";
    private string activityDescription = "Tracked via GPS";

    // This will be triggered when the page first loads
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var activities = await activityService.GetAvailableActivitiesAsync();
            if (activities != null)
                availableActivities = activities;
            await StartLocationTracking(); // Start tracking immediately
            await JSRuntime.InvokeVoidAsync("handleSwipe", "bottomSheet");
        }
    }

    private void StartCompass()
    {
        try
        {
            Compass.Start(SensorSpeed.UI); // Start monitoring the compass at UI speed
            Compass.ReadingChanged += Compass_ReadingChanged;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Compass error: " + ex.Message);
        }
    }

    private void StopCompass()
    {
        Compass.Stop();
        Compass.ReadingChanged -= Compass_ReadingChanged;
    }

    private void Compass_ReadingChanged(object sender, CompassChangedEventArgs e)
    {
        currentHeading = e.Reading.HeadingMagneticNorth; // Use Magnetic North for heading
    }


    private async Task StartLocationTracking()
    {
        try
        {
            var status = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();
            if (status != PermissionStatus.Granted)
            {
                isLoadingLocation = false;
                return;
            }

            StartCompass();

            while (currentLocation == null)
            {
                var location = await Geolocation.GetLocationAsync(new GeolocationRequest(GeolocationAccuracy.High));

                if (location != null)
                {
                    currentLocation = location;

                    if (!mapInitialized)
                    {
                        mapInitialized = true;
                        mapVisible = true;
                        await JSRuntime.InvokeVoidAsync("initializeMap", location.Latitude, location.Longitude);
                    }

                    await JSRuntime.InvokeVoidAsync("updateMap", location.Latitude, location.Longitude, currentHeading);
                    isLoadingLocation = false;
                    StateHasChanged();
                }

                await Task.Delay(1500);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Location error: " + ex.Message);
            isLoadingLocation = false;
        }
    }

    private void ToggleTracking()
    {
        if (isTracking)
        {
            _ = StopTracking();
        }
        else
        {
            _ = StartTracking();
        }
    }


    private async Task StartTracking()
    {
        isTracking = true;
        startTime = DateTime.UtcNow;
        route.Clear();
        durationCts = new CancellationTokenSource();

        _ = Task.Run(() => FakeTrackWhileMoving()); // start location tracking
        _ = Task.Run(() => UpdateDuration(durationCts.Token)); // start timer
    }

    private async Task TrackWhileMoving()
    {
        try
        {
            while (isTracking)
            {
                var location = await Geolocation.GetLocationAsync(new GeolocationRequest(GeolocationAccuracy.High));

                if (location != null)
                {
                    if (route.Count > 0)
                    {
                        var lastLocation = route.Last();
                        Distance += Location.CalculateDistance(lastLocation, location, DistanceUnits.Kilometers);
                    }

                    route.Add(location);

                    Speed = location.Speed.HasValue && location.Speed.Value > 0
                        ? location.Speed.Value * 3.6 // m/s to km/h
                        : (Distance / Duration.TotalHours); // fallback estimate

                    await JSRuntime.InvokeVoidAsync("updateMap", location.Latitude, location.Longitude, currentHeading);
                    await InvokeAsync(() => StateHasChanged());
                }

                await Task.Delay(3000);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Tracking error: " + ex.Message);
        }
    }


    private async Task FakeTrackWhileMoving()
    {
        try
        {
            var fakeRoute = GenerateStraightRoute(currentLocation);

            foreach (var location in fakeRoute)
            {
                if (!isTracking)
                {
                    break;
                }

                if (route.Count > 0)
                {
                    var lastLocation = route.Last();
                    Distance += Location.CalculateDistance(lastLocation, location, DistanceUnits.Kilometers);
                }

                route.Add(location);

                Speed = Distance / Math.Max(Duration.TotalHours, 0.0001); // prevent division by zero

                await JSRuntime.InvokeVoidAsync("updateMap", location.Latitude, location.Longitude, currentHeading);

                // Ensure UI updates are triggered on the UI thread
                await InvokeAsync(() => StateHasChanged());

                await Task.Delay(3000); // simulate interval
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Tracking error: " + ex.Message);
        }
    }

    private List<Location> GenerateStraightRoute(Location startLocation, int pointCount = 35, double stepInMeters = 50)
    {
        var route = new List<Location> { startLocation };

        // 1 degree latitude ≈ 111,320 meters
        double stepLatitude = stepInMeters / 111320.0;

        for (int i = 1; i < pointCount; i++)
        {
            var last = route.Last();
            var next = new Location(last.Latitude + stepLatitude, last.Longitude);
            route.Add(next);
        }

        return route;
    }


    private async Task UpdateDuration(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            Duration = DateTime.UtcNow - startTime;

            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000, token);
        }
    }

    private async Task StopTracking()
    {
        isTracking = false;
        isPaused = true;
        StopCompass();
        durationCts?.Cancel();
        StateHasChanged();
    }

    private async Task ResumeTracking()
    {
        isPaused = false;
        showFinishModal = false;
        isTracking = true;
        durationCts = new CancellationTokenSource();
        _ = Task.Run(() => FakeTrackWhileMoving()); // or TrackWhileMoving()
        _ = Task.Run(() => UpdateDuration(durationCts.Token));
    }

    private void ShowFinishModal()
    {
        showFinishModal = true;
    }

    private void DiscardActivity()
    {
        showFinishModal = false;
        isPaused = false;
        Distance = 0;
        Speed = 0;
        Duration = TimeSpan.Zero;
        route.Clear();
        StateHasChanged();
    }

    private async Task SaveActivityWithMeta()
    {
        var dto = new CreateUserActivityDto
            {
                Title = activityTitle,
                Description = activityDescription,
                ActivityId = selectedActivityId,
                DateStart = startTime,
                DateEnd = DateTime.UtcNow,
                DurationMinutes = (int)Duration.TotalMinutes,
                Route = route.Select(loc => new GeoPointDto
                {
                    Latitude = loc.Latitude,
                    Longitude = loc.Longitude,
                    Timestamp = DateTime.UtcNow
                }).ToList()
            };

        await activityService.AddActivityAsync(dto);
        showFinishModal = false;
        isPaused = false;
        Distance = 0;
        Duration = TimeSpan.Zero;
        Speed = 0;
        route.Clear();
    }
}

