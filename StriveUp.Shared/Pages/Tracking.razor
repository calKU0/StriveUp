@page "/tracking"

<!-- Usings -->
@using GeolocatorPlugin
@using GeolocatorPlugin.Abstractions
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.Devices.Sensors
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Activity
@using System.Diagnostics

<!-- Injections -->
@inject IJSRuntime JSRuntime
@inject IActivityService ActivityService
@inject ISecurableService SecurableService
@inject IBleHeartRateService HeartRateService
@inject NavigationManager Navigation
@inject ICustomAuthStateProvider AuthStateProvider
@inject IPlatformService PlatformService
@implements IDisposable


@if (!PlatformService.IsNativeApp())
{
    <!-- Show Not Found or Redirect -->
    <LayoutView Layout="typeof(Layout.MainLayout)">
        <h3>This page is not available on the web.</h3>
        <p>Please use the mobile app to access tracking.</p>
    </LayoutView>
}


<div class="page-wrapper container-full @(mapVisible ? "map-visible" : "")">
    @if (isLoadingLocation)
    {
        <Spinner text="Acquiring GPS. Please wait..."></Spinner>
    }
    else
    {
        <div class="slides">
            @if (!selectedActivity.Indoor)
            {
                <div class="map-section">
                    <div id="map"></div>
                </div>
            }
            <!-- TO DO -->
            <!-- Add generic modal select on ActivityType/Sensor click -->
            <div class="controls">
                <ActivityControls AvailableActivities="availableActivities"
                SelectedActivity="@selectedActivity"
                IsTracking="@isTracking"
                IsPaused="@isPaused"
                OnSelectedSensorChanged="@(sensor => ConnectHrDevice(sensor))"
                SelectedActivityChanged="@((ActivityDto a) => OnSelectedActivityChanged(a))"
                OnStartClick="@ToggleTracking"
                OnStopClick="@ToggleTracking"
                OnResumeClick="@ResumeTracking"
                OnFinishClick="@ShowFinishModal" />
            </div>
        </div>
        @if (isTracking || isPaused)
        {
            <div class="slides" id="tracking-section">
                <div class="tiles-wrapper p-2">
                    <!-- Info Tiles -->
                    <div class="row g-3">
                        @if(!selectedActivity.DistanceRelevant)
                        {
                            <InfoTile Label="Distance" Value="@($"{Distance * 1000:F2} km")" IconClass="fas fa-route" />
                            <!-- Conditional display of Speed or Pace -->
                            @if (selectedActivity.SpeedRelevant)
                            {
                                <InfoTile Label="@GetSpeedOrPaceLabel()" Value="@GetSpeedOrPace()" IconClass="fas fa-tachometer-alt" />
                            }
                        }
                        <InfoTile Label="Heart Rate" Value="@($"{HeartRate} bpm")" IconClass="fas fa-heartbeat" />
                        <InfoTile Label="Duration" Value="@Duration.ToString(@"hh\:mm\:ss")" IconClass="fas fa-stopwatch" />
                        @if (selectedActivity.ElevationRelevant)
                        {
                            <!-- TO DO -->
                            <!-- Elevation tracking -->
                            <InfoTile Label="Elevation" Value="--" />
                        }
                        <!-- TO DO -->
                        <!-- Add dynamic kcal -->
                        <InfoTile Label="Kcal" Value="--" />
                    </div>
                </div>
            </div>
        }
    }


</div>

<FinishModal Show="@showFinishModal"
Duration="@Duration"
Title="@activityTitle"
Description="@activityDescription"
OnSave="@SaveActivityWithMeta"
OnDiscard="@DiscardActivity" />



@code {
    private List<ActivityHrDto> HrData = new();
    private List<ActivitySpeedDto> SpeedData = new();
    private List<ActivityElevationDto> ElevationData = new();
    private string selectedDeviceId;
    private List<Location> route = new();
    private List<ActivityDto> availableActivities = new();
    private bool isPaused = false;
    private ActivityDto selectedActivity;
    private bool isTracking = false;
    private bool mapVisible = false;
    private bool mapInitialized = false;
    private Location currentLocation;
    private int Distance = 0;
    private double Speed = 0;
    private int HeartRate = 0;
    private TimeSpan Duration = TimeSpan.Zero;
    private DateTime startTime;
    private double currentHeading = 0;
    private CancellationTokenSource durationCts;
    private bool isLoadingLocation = true;
    private string mapToken;
    private bool btPermission = false;
    private bool isSheetExpanded = false;
    private double smoothedSpeed = 0;
    private const double smoothingAlpha = 0.2;
    private Location lastLocation;
    private DateTime resumeTime;
    private IGeolocator locator = CrossGeolocator.Current;
    private ListenerSettings listenerSettings = new ListenerSettings
    {
        AllowBackgroundUpdates = true,
        ActivityType = ActivityType.Fitness,
        DeferLocationUpdates = false,
        ListenForSignificantChanges = false,
        PauseLocationUpdatesAutomatically = false
    };

    private bool showFinishModal = false;
    private string activityTitle = "My Activity";
    private string activityDescription = "Tracked via GPS";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated == false)
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        var activities = await ActivityService.GetAvailableActivitiesAsync();
        if (activities != null)
            availableActivities = activities;

        selectedActivity = availableActivities.FirstOrDefault();

        locator.DesiredAccuracy = 1;
        mapToken = await SecurableService.GetMapboxTokenAsync();

        if (!selectedActivity.Indoor)
        {
            StartCompass();
            _ = StartLocationTracking();
        }
    }  

    private async Task StartLocationTracking()
    {
        try
        {
            var status = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();
            if (status != PermissionStatus.Granted)
            {
                isLoadingLocation = false;
                return;
            }

            locator.PositionChanged += OnPositionChanged;
            if (!locator.IsListening)
            {
                await locator.StartListeningAsync(TimeSpan.FromSeconds(1), 10, false, listenerSettings);
            }  
        }
        catch (Exception ex)
        {
            Console.WriteLine("Location error: " + ex.Message);
            isLoadingLocation = false;
        }
    }

    private void OnPositionChanged(object sender, PositionEventArgs e)
    {
        isLoadingLocation = false;
        var location = new Location(e.Position.Latitude, e.Position.Longitude)
        {
            Timestamp = e.Position.Timestamp
        };

        double distanceMoved = currentLocation != null ? Location.CalculateDistance(currentLocation.Latitude, currentLocation.Longitude, location, DistanceUnits.Kilometers) : 0;
        if (distanceMoved > 0.1 || e.Position.Accuracy > 5 && currentLocation != null)
        {
            Console.WriteLine("Suspicious jump filtered: " + distanceMoved + " meters");
            return;
        }

        currentLocation = location;

        if (!mapInitialized)
        {
            StateHasChanged();
            mapInitialized = true;
            mapVisible = true;
            _ = JSRuntime.InvokeVoidAsync("initializeMap", location.Latitude, location.Longitude, mapToken);
        }

        _ = JSRuntime.InvokeVoidAsync("updateMap", currentLocation.Latitude, currentLocation.Longitude, currentHeading, isTracking);
        StateHasChanged();

        if (isTracking)
        {
            UpdateTrackingData(location);
        }
    }


    private void UpdateTrackingData(Location location)
    {
        if (lastLocation != null)
        {
            var distanceDelta = Location.CalculateDistance(lastLocation, location, DistanceUnits.Kilometers) * 1000;
            var timeDelta = (location.Timestamp - lastLocation.Timestamp).TotalHours;

            if (timeDelta > 0)
            {
                var deltaSpeed = (distanceDelta) / (timeDelta * 3600); // m/s
                Speed = ApplyLowPassFilter(deltaSpeed);
            }

            Distance += Convert.ToInt32(Math.Round(distanceDelta));
        }

        lastLocation = location;
        route.Add(location);

        var timestamp = location.Timestamp.UtcDateTime;

        SpeedData.Add(new ActivitySpeedDto
        {
            SpeedValue = Speed,
            TimeStamp = timestamp
        });

        if (HeartRate > 0)
        {
            HrData.Add(new ActivityHrDto
            {
                HearthRateValue = HeartRate,
                TimeStamp = timestamp
            });
        }

        if (location.Altitude.HasValue)
        {
            ElevationData.Add(new ActivityElevationDto
            {
                ElevationValue = location.Altitude.Value,
                TimeStamp = timestamp
            });
        }
    }


    private double ApplyLowPassFilter(double newSpeed)
    {
        smoothedSpeed = smoothingAlpha * newSpeed + (1 - smoothingAlpha) * smoothedSpeed;
        return smoothedSpeed;
    }

    private async Task OnSelectedActivityChanged(ActivityDto activity)
    {
        if (selectedActivity == activity)
        {
            return;
        }

        selectedActivity = activity;
        if (selectedActivity.Indoor)
        {
            if (locator.IsListening)
            {
                locator.PositionChanged -= OnPositionChanged;
                await locator.StopListeningAsync();
            }
            StopCompass();
        }
        else
        {
            StartCompass();
            _ = StartLocationTracking();
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ConnectHrDevice(BluetoothDeviceDto device)
    {
        selectedDeviceId = device.Id;
        var success = await HeartRateService.ConnectAsync(selectedDeviceId);
        if (success)
        {
            HeartRateService.OnHeartRateChanged += (hr) =>
            {
                if (isTracking)
                {
                    HeartRate = hr;
                    HrData.Add(new ActivityHrDto
                    {
                        HearthRateValue = hr,
                        TimeStamp = DateTime.UtcNow
                    });
                    Debug.WriteLine($"Heart Rate: {hr} bpm");
                }

                InvokeAsync(StateHasChanged);
            };
        }
    }


    private void ToggleTracking()
    {
        if (isTracking)
        {
            _ = StopTracking();
        }
        else
        {
            _ = StartTracking();
        }
    }


    private async Task StartTracking()
    {
        isTracking = true;
        startTime = DateTime.UtcNow;
        route.Clear();
        durationCts = new CancellationTokenSource();
        await InvokeAsync(() => StateHasChanged());

        await JSRuntime.InvokeVoidAsync("scrollToTrackingSection");
        _ = Task.Run(() => UpdateDuration(durationCts.Token)); 
    }


    private async Task UpdateDuration(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            Duration = DateTime.UtcNow - startTime;

            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000, token);
        }
    }

    private async Task StopTracking()
    {
        isTracking = false;
        isPaused = true;
        durationCts?.Cancel();
        if (locator.IsListening)
        {
            locator.PositionChanged -= OnPositionChanged;
            await locator.StopListeningAsync();
        }
        StateHasChanged();
    }

    private async Task ResumeTracking()
    {
        isPaused = false;
        showFinishModal = false;
        isTracking = true;
        durationCts = new CancellationTokenSource();
        if (!locator.IsListening)
        {
            locator.PositionChanged += OnPositionChanged;
            await locator.StartListeningAsync(TimeSpan.FromSeconds(1), 5, false, listenerSettings);
        }

        _ = Task.Run(() => UpdateDuration(durationCts.Token));
    }

    private void ShowFinishModal()
    {
        showFinishModal = true;
    }

    private async Task DiscardActivity()
    {
        await JSRuntime.InvokeVoidAsync("clearRoute");

        showFinishModal = false;
        isPaused = false;
        Distance = 0;
        Speed = 0;
        Duration = TimeSpan.Zero;
        route.Clear();
        StateHasChanged();
    }

    private async Task SaveActivityWithMeta()
    {
        var dto = new CreateUserActivityDto
        {
            Title = activityTitle,
            Description = activityDescription,
            ActivityId = selectedActivity.Id,
            DateStart = startTime,
            DateEnd = DateTime.UtcNow,
            Route = route.Select(loc => new GeoPointDto
            {
                Latitude = loc.Latitude,
                Longitude = loc.Longitude,
                Timestamp = loc.Timestamp.UtcDateTime,
            }).ToList(),
            Distance = Distance,
            HrData = HrData,
            SpeedData = SpeedData,
            ElevationData = ElevationData
        };

        await ActivityService.AddActivityAsync(dto);
        await JSRuntime.InvokeVoidAsync("clearRoute");

        showFinishModal = false;
        isPaused = false;
        Distance = 0;
        Duration = TimeSpan.Zero;
        Speed = 0;
        route.Clear();

        Compass.Default.Stop();
        Compass.Default.ReadingChanged -= OnCompassReadingChanged;

        Navigation.NavigateTo("/feed");
    }

    private void StartCompass()
    {
        if (!Compass.Default.IsSupported)
        {
            return;
        }

        if (!Compass.IsMonitoring)
        {
            Compass.Default.ReadingChanged += OnCompassReadingChanged;
            Compass.Default.Start(SensorSpeed.UI);
        }
    }

    private void StopCompass()
    {
        if (!Compass.Default.IsSupported)
        {
            return;
        }
        if (Compass.IsMonitoring)
        {
            Compass.Default.Stop();
            Compass.Default.ReadingChanged -= OnCompassReadingChanged;
        }
    }

    private void OnCompassReadingChanged(object sender, CompassChangedEventArgs e)
    {
        if (currentLocation == null)
        {
            return;
        }
        JSRuntime.InvokeVoidAsync("updateMap", currentLocation.Latitude, currentLocation.Longitude, currentHeading, isTracking);
        currentHeading = e.Reading.HeadingMagneticNorth;
    }


    public void Dispose()
    {
        // Unsubscribe when the component is disposed to avoid memory leaks
        StopCompass();
        locator.PositionChanged -= OnPositionChanged;
        locator.StopListeningAsync();
    }

    private string GetSpeedOrPace()
    {
        const double minMovementThreshold = 0.5; // m/s below which we consider "not moving"

        if (Speed < minMovementThreshold)
        {
            return selectedActivity.MeasurementType == "pace" ? "0:00 min/km" : "0.00 km/h";
        }

        if (selectedActivity.MeasurementType == "pace")
        {
            // Convert m/s to pace (min/km)
            double paceInMinPerKm = 1000.0 / Speed / 60.0;

            // Round to nearest 0.05 minutes (i.e., 3 seconds)
            double roundedPace = Math.Round(paceInMinPerKm * 20.0) / 20.0;

            int minutes = (int)roundedPace;
            int seconds = (int)Math.Round((roundedPace - minutes) * 60);

            if (seconds == 60)
            {
                minutes++;
                seconds = 0;
            }

            return $"{minutes}:{seconds:D2} min/km";
        }
        else
        {
            // Convert m/s to km/h
            double speedInKmH = Speed * 3.6;
            return $"{speedInKmH:F2} km/h";
        }
    }

    private string GetSpeedOrPaceLabel()
    {
        return selectedActivity.MeasurementType == "pace" ? "Pace" : "Speed";
    }
}

