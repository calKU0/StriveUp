@page "/settings"
@using Microsoft.Maui.ApplicationModel
@using StriveUp.Shared.Enums
@using System.Security.Claims
@using Microsoft.Extensions.DependencyInjection;

<!-- Injections -->
@inject IAppSettingsService AppSettingsService
@inject ICustomAuthStateProvider AuthStateProvider
@inject IAuthService AuthService
@inject IProfileService ProfileService
@inject IServiceProvider ServiceProvider
@inject IPlatformService PlatformService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation


<PageTitle>Settings</PageTitle>

<div class="container py-4">
    <h2 class="mb-4 fw-bold text-center d-none d-md-block">Settings</h2>

    <div class="row g-3">

        <!-- Change Email -->
@*         <div class="col-12 col-md-6 d-flex">
            <a href="/change-email" class="list-group-item list-group-item-action shadow-sm rounded d-flex justify-content-between align-items-center w-100 h-100 settings-tile">
                <span>Change Email</span>
                <i class="bi bi-chevron-right text-muted"></i>
            </a>
        </div> *@

        <!-- Synchronize Activities -->
        <div class="col-12 col-md-6 d-flex">
            <SettingsTile Title="Synchronize Activities" Icon="bi bi-arrow-repeat" Link="/synchronize" />
        </div>

        @if (PlatformService.IsNativeApp())
        {         
            <!-- Heart Rate Sensor -->
            <div class="col-12 col-md-6 d-flex">
                <SettingsTile Title="Heart Rate Sensor" Icon="bi bi-phone" OnClick="LoadSensorModal" />
            </div>
        }

        <!-- Appearance -->
        <div class="col-12 col-md-6 d-flex">
            <SettingsTile Title="Appearance" Description="@selectedTheme.ToString()" OnClick="() => showThemeModal = true" />
        </div>

        <!-- Default Metric -->
        <div class="col-12 col-md-6 d-flex">
            <SettingsTile Title="Default Metric" Description="@selectedMetric.ToString()" OnClick="() => showMetricModal = true" />
        </div>

        <!-- Privacy Control -->
        <div class="col-12 col-md-6 d-flex">
            <SettingsTile Title="Privacy Control" Icon="bi bi-shield-lock" Link="/privacy-control" />
        </div>

        <!-- Terms of Service -->
        <div class="col-12 col-md-6 d-flex">
            <SettingsTile Title="Terms Of Service" Icon="bi bi-file-earmark-text" Link="/terms-of-service" />
        </div>

        <!-- Privacy Policy -->
        <div class="col-12 col-md-6 d-flex">
            <SettingsTile Title="Privacy Policy" Icon="bi bi-file-earmark-text" Link="/privacy-policy" />
        </div>

        <!-- Delete Account -->
        <div class="col-12 col-md-6 d-flex">
            <SettingsTile Title="Delete Account" Icon="bi bi-trash" Color="danger" OnClick="HandleDeleteAccount" />
        </div>

        <!-- Log Out -->
        <div class="col-12 col-md-6 d-flex">
            <SettingsTile Title="Log Out" Icon="bi bi-box-arrow-right" Color="danger" OnClick="HandleLogout" />
        </div>

    </div>
</div>

<GenericSelectModal TItem="Enums.AppTheme"
                    Show="@showThemeModal"
                    ShowChanged="@(v => showThemeModal = v)"
                    Label="Choose Theme"
                    Description="This changes how your app looks. Choose between Light, Dark, or follow your System settings."
                    Options="@themeOptions"
                    SelectedValue="@selectedTheme"
                    SelectedValueChanged="OnThemeChanged" />

<GenericSelectModal TItem="DefaultMetric"
                    Show="@showMetricModal"
                    ShowChanged="@(v => showMetricModal = v)"
                    Label="Choose Default Metric"
                    Description="Set your preferred measurement system for activities. This will be used across distances, elevations, and stats."
                    Options="@metricOptions"
                    SelectedValue="@selectedMetric"
                    SelectedValueChanged="OnMetricChanged" />

@if (PlatformService.IsNativeApp())
{   
    <GenericSelectModal TItem="BluetoothDeviceDto"
                        Show="@showSensorModal"
                        ShowChanged="@(v => showSensorModal = v)"
                        Label="Select Heart Rate Sensor"
                        Description="Choose a paired Bluetooth heart rate sensor to connect with. This allows live heart rate monitoring during activities."
                        Options="@availableSensors"
                        SelectedValue="@selectedSensor"
                        SelectedValueChanged="OnSensorSelected"
                        GetLabel="@GetSensorLabel"
                        GetValue="@GetSensorValue">                     
                        <NoDataTemplate>
                        <div class="text-center p-4 text-muted fst-italic">
                            No sensors found. Please make sure your Bluetooth device is on and discoverable.
                         </div>
                        </NoDataTemplate>
</GenericSelectModal>
}

@if (isDeletingAccount)
{
    <Spinner Overlay=true text="Deleting..."></Spinner>
}

@if (!string.IsNullOrEmpty(deleteErrorMessage))
{
    <Toast Message="@deleteErrorMessage" IsError=true OnDismiss ="DismissToast"></Toast>
}

@if (showDeletedToast)
{
    <div class="toast-container position-fixed top-0 end-0">
        <div class="toast show align-items-center text-bg-success border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    Your account was deleted successfully. Goodbye!
                </div>
                <button type="button"
                        class="btn-close btn-close-white me-2 m-auto"
                        @onclick="() => showDeletedToast = false"></button>
            </div>
        </div>
    </div>
}


@code {
    private bool showThemeModal = false;
    private bool showMetricModal = false;
    private bool showSensorModal = false;
    private bool showDeletedToast;
    private bool isDeletingAccount = false;
    private string? deleteErrorMessage = null;

    private Enums.AppTheme selectedTheme;
    private DefaultMetric selectedMetric;
    private string selectedSensorDisplay = "None";
    private BluetoothDeviceDto? selectedSensor;

    private List<Enums.AppTheme> themeOptions = Enum.GetValues<Enums.AppTheme>().ToList();
    private List<DefaultMetric> metricOptions = Enum.GetValues<DefaultMetric>().ToList();
    private List<BluetoothDeviceDto> availableSensors = new();

    private IBleHeartRateService? BleHeartRateService;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (!currentUser.Identity?.IsAuthenticated ?? true)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            if (PlatformService.IsNativeApp())
            {
                BleHeartRateService = ServiceProvider.GetService<IBleHeartRateService>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading user config: " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var config = await ProfileService.GetUserConfig();
            if (config == null)
            {
                // If no config exists, create a default one
                config = new UserConfigDto
                {
                    Theme = Enums.AppTheme.Light,
                    DefaultMetric = DefaultMetric.Kilometers,
                };
            }
            selectedTheme = config.Theme;
            selectedMetric = config.DefaultMetric;
            selectedSensor = new BluetoothDeviceDto
            {
                Id = config.SensorId ?? "",
                Name = config.SensorName ?? ""
            };
            StateHasChanged();

            if (!string.IsNullOrWhiteSpace(config.SensorName))
            {
                selectedSensorDisplay = config.SensorName;
            }
        }
    }

    private void DismissToast()
    {
        deleteErrorMessage = null;
    }

    async Task LoadSensorModal()
    {
        var status = await Permissions.CheckStatusAsync<Permissions.Bluetooth>();

        if (status != PermissionStatus.Granted)
        {
            status = await Permissions.RequestAsync<Permissions.Bluetooth>();

            if (status != PermissionStatus.Granted)
            {
                bool openSettings = await JSRuntime.InvokeAsync<bool>(
                    "confirm",
                    "Bluetooth permission is required to select a sensor. Would you like to open app settings to enable it?"
                );

                if (openSettings)
                {
                    AppSettingsService.OpenAppSettings();
                }

                return;
            }
        }

        availableSensors = BleHeartRateService.GetAvailableDevicesAsync();
        if (!string.IsNullOrWhiteSpace(selectedSensor?.Id))
        {
            selectedSensor = availableSensors.FirstOrDefault(d => d.Id == selectedSensor.Id);
        }
        showSensorModal = true;
    }


    async Task OnThemeChanged(Enums.AppTheme theme)
    {
        selectedTheme = theme;
        await UpdateUserConfig(new UpdateUserConfigDto { Theme = selectedTheme });
    }

    async Task OnMetricChanged(DefaultMetric metric)
    {
        selectedMetric = metric;
        await UpdateUserConfig(new UpdateUserConfigDto { DefaultMetric = selectedMetric });
    }

    async Task OnSensorSelected(BluetoothDeviceDto device)
    {
        selectedSensor = device;
        selectedSensorDisplay = $"{device.Name}";

        await UpdateUserConfig(new UpdateUserConfigDto
        {
            SensorId = device.Id,
            SensorName = device.Name
        });
    }

    async Task UpdateUserConfig(UpdateUserConfigDto dto)
    {
        try
        {
            await ProfileService.UpdateUserConfig(dto);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error updating config: " + ex.Message);
        }
    }

    private string GetSensorLabel(BluetoothDeviceDto device) => $"{device.Name}";

    private string GetSensorValue(BluetoothDeviceDto device) => device.Id;

    async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    async Task HandleDeleteAccount()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "⚠️ Are you absolutely sure?\n\n" +
            "Deleting your account is irreversible. " +
            "All your activities, stats, and settings will be permanently removed.");

        if (!confirmed)
            return;
        isDeletingAccount = true;
        deleteErrorMessage = null;
        StateHasChanged();

        try
        {
            await AuthService.DeleteAccountAsync();

            isDeletingAccount = false;
            showDeletedToast = true;
            StateHasChanged();

            await Task.Delay(3000);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            deleteErrorMessage = "Failed to delete your account. Please try again later.";
            Console.Error.WriteLine("Delete failed: " + ex.Message);
        }
        finally
        {
            isDeletingAccount = false;
            StateHasChanged();
        }
    }
}
