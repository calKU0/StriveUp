@page "/profile"
@page "/profile/{username?}"
@inject IAuthService AuthService
@inject ICustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IProfileService ProfileService
@inject IPlatformService PlatformService

@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Profile
@using System.Security.Claims
@using StriveUp.Shared.Components

<div class="container py-5">
    @if (isLoading)
    {
        <div class="d-flex flex-column align-items-center justify-content-center" style="height: 60vh;">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-3 text-muted">Loading profile...</p>
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else
    {
        <!-- Profile Header -->
        <div class="profile-card mb-4">
            <img src="@GetAvatarUrl()" alt="Avatar" class="profile-avatar" />
            <div class="flex-grow-1">
                <h4 class="fw-bold mb-0">@userProfile.UserName</h4>
                <p class="text-muted mb-1">@userProfile.FirstName @userProfile.LastName</p>
            </div>
            @if (isEditable)
            {
                <div class="profile-actions text-end">
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="HandleEdit">
                        <i class="fas fa-edit me-1"></i> Edit Profile
                    </button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="HandleLogout">
                        <i class="fas fa-sign-out-alt me-1"></i> Logout
                    </button>
                </div>
            }
        </div>

        <!-- Tabs -->
        <ul class="nav nav-tabs mb-4" id="profileTabs" role="tablist">
            <li class="nav-item">
                <button class="nav-link @(activeTab == "activities" ? "active" : "")" @onclick="@(() => SetTab("activities"))">
                    Activities
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(activeTab == "medals" ? "active" : "")" @onclick="@(() => SetTab("medals"))">
                    Medals
                </button>
            </li>
        </ul>

        <!-- Activities Tab -->
        @if (activeTab == "activities")
        {
            <div>
                <h5 class="mb-3">Activities</h5>
                @if (userProfile.Activities?.Any() == true)
                {
                    <div class="row g-3">
                        @foreach (var activity in userProfile.Activities)
                        {
                            <ActivityCard Activity="activity" />
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">No activities recorded yet.</p>

                    <!-- Encourage user to do an activity -->
                    @if (PlatformService.IsNativeApp())
                    {
                        <div class="alert alert-info">
                            <p>Start tracking your activities now! <a href="/tracking" class="btn btn-primary">Go to Tracking</a></p>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <p>Start tracking your activities! Download our app from Google Play:</p>
                            <a href="https://play.google.com/store/apps/details?id=com.striveup.app" class="btn btn-primary" target="_blank">
                                Download the App
                            </a>
                        </div>
                    }
                }
            </div>
        }

        <!-- Medals Tab -->
        @if (activeTab == "medals")
        {
            <div>
                <h5 class="mb-3">Earned Medals</h5>
                @if (userProfile.Medals?.Any() == true)
                {
                    <div class="row g-4">
                        @foreach (var medal in userProfile.Medals)
                        {
                            <div class="col-md-4">
                                <MedalCard Medal="medal" />
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">No medals earned yet.</p>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public string? Username { get; set; }
    private bool isLoading = true;
    private string? errorMessage;
    private UserProfileDto userProfile = new();
    private bool isEditable = false;
    private string userName = "";
    private string activeTab = "activities";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var currentUser = authState.User;

                if (currentUser.Identity?.IsAuthenticated == true)
                {
                    userName = Username ?? currentUser.Identity.Name;

                    var (success, error, profile) = await ProfileService.GetProfile(userName);

                    if (success && profile != null)
                    {
                        userProfile = profile;
                        isEditable = (userName == currentUser.Identity?.Name);
                    }
                    else
                    {
                        errorMessage = error?.Message + Environment.NewLine + error?.Details ?? "An unexpected error occurred.";
                    }
                }
                else
                {
                    errorMessage = "You are not authenticated.";
                }
            }
            finally
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    private async Task HandleEdit()
    {
        Navigation.NavigateTo("/profile/edit");
    }

    private string GetAvatarUrl() =>
        string.IsNullOrWhiteSpace(userProfile.Avatar)
            ? "https://via.placeholder.com/100"
            : userProfile.Avatar;

    private void SetTab(string tab)
    {
        activeTab = tab;
    }
}
