@page "/profile"
@page "/profile/{username?}"

<!-- Usings -->
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Activity
@using StriveUp.Shared.DTOs.Leaderboard
@using StriveUp.Shared.DTOs.Profile
@using StriveUp.Shared.Helpers

<!-- Injections -->
@inject IAuthService AuthService
@inject ICustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IProfileService ProfileService
@inject IPlatformService PlatformService
@inject IJSRuntime JSRuntime
@inject IActivityService ActivityService
@inject ILeaderboardService LeaderboardService
@inject IFollowService FollowService
@implements IDisposable

<PageTitle>Profile</PageTitle>

<div class="container-fluid p-0 m-0">
  <div class="container-md px-0 py-4 px-md-4 py-md-5">
    @if (isLoading)
    {
        <Spinner text="Loading profile."></Spinner>
    }
    else if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else
    {
        @if (isLoading)
        {
            <Spinner text="Loading profile..."></Spinner>
        }
        else if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        else
        {
            <!-- Profile Header -->
            <div class="profile-card mb-4 position-relative row p-3 mt-0 mt-md-3">
                <!-- Avatar, Overlapping and Centered at the Left Border of the Card -->
                <div class="col-12 col-md-4 col-lg-3 d-flex justify-content-center justify-content-md-start">
                    <div class="avatar-overlay-container">
                        <img src="@GetAvatarUrl()" alt="Avatar" class="profile-avatar-overlay" />
                    </div>
                </div>

                <div class="col-12 col-md-8 col-lg-9 d-flex flex-column">
                    <div class="ms-0 ms-md-5">
                        <!-- User Name and Full Name -->
                        <h4 class="fw-bold mb-0">@userProfile.UserName</h4>
                        <p class="text-muted mb-1">@userProfile.FirstName @userProfile.LastName</p>

                        <!-- Location Info -->
                        <div class="mb-2 text-muted">
                            <i class="fas fa-map-marker-alt me-1"></i>
                            @FormatLocation(userProfile.City, userProfile.State, userProfile.Country)
                        </div>

                        @if (userProfile?.Birthday != null)
                        {
                            <span><i class="bi bi-cake2"></i> @userProfile.Birthday.Value.ToShortDateString()</span>
                        }

                        <!-- XP & Level -->
                        <div class="d-flex align-items-center mt-3 level-info text-end">
                            <i class="fas fa-star me-2 text-warning"></i>
                            <strong>Level @userProfile.LevelNumber</strong>
                            <span class="ms-2 text-muted small">@userProfile.CurrentXP / @userProfile.LevelTotalXP XP</span>
                        </div>
                        <div class="progress my-2" style="height: 6px; max-width: 300px; width: 100%;" @key="XPProgress">
                        <div class="progress-bar bg-warning" role="progressbar"
                                style="width: @(XPProgress)%;" aria-valuenow="@XPProgress"
                                aria-valuemin="0" aria-valuemax="100"></div>
                        </div>

                        <!-- Followers / Following -->
                        <div class="d-flex flex-wrap gap-3 align-items-center mt-3 mb-md-0 mb-2">
                            <a class="text-muted" href="followers/@userName">
                                <i class="fas fa-users me-1"></i>
                                <strong>@userProfile.Followers.Count</strong> Followers
                            </a>
                            <a class="text-muted" href="following/@userName">
                                <i class="fas fa-user-plus me-1"></i>
                                <strong>@userProfile.Following.Count</strong> Following
                            </a>
                            @if (!isEditable)
                            {
                                <button class="btn btn-sm @(IsFollowing ? "btn-outline-danger" : "btn-primary")"
                                        @onclick:stopPropagation
                                        @onclick="ToggleFollow">
                                    @(IsFollowing ? "Unfollow" : "Follow")
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <!-- Buttons (Editable section) -->
                @if (isEditable)
                {
                    <div class="profile-actions d-flex flex-column text-end ms-auto col-12 col-md-2">
                        <button class="btn btn-outline-secondary btn-sm mb-2" @onclick="HandleEdit">
                            <i class="fas fa-edit me-1"></i> Edit Profile
                        </button>
                        <button class="btn btn-outline-danger btn-sm" @onclick="HandleLogout">
                            <i class="fas fa-sign-out-alt me-1"></i> Logout
                        </button>
                    </div>
                }
            </div>
            @if (isEditable)
            {
                 <Goal />
            }
        }

        <!-- Tabs -->
        <div class="tabs leaderboard-type-tabs row row-cols-3 g-0">
            <div class="col">
                <button class="tab-button w-100 @(SelectedUserTabType == UserTabType.Activities ? "active" : "")"
                        @onclick="@(() => OnTabTypeChanged(UserTabType.Activities))">
                    Activities
                </button>
                <button class="tab-button w-100 @(SelectedUserTabType == UserTabType.Medals ? "active" : "")"
                        @onclick="@(() => OnTabTypeChanged(UserTabType.Medals))">
                    Medals
                </button>
                <button class="tab-button w-100 @(SelectedUserTabType == UserTabType.Statistics ? "active" : "")"
                        @onclick="@(() => OnTabTypeChanged(UserTabType.Statistics))">
                    Statistics
                </button>
            </div>
        </div>


        <!-- Activities Tab -->
        @if (SelectedUserTabType == UserTabType.Activities)
        {
            <div>
                @if (pagedActivities.Any())
                {
                    <div class="row g-3">
                        @foreach (var activity in pagedActivities)
                        {
                            <ActivityCard Activity="activity" />
                        }
                    </div>

                    @if (isActivitiesLoading && activityPage > 1)
                    {
                        <Spinner isSmall="true"></Spinner>
                    }
                    else if (hasMoreActivities)
                    {
                        <div @ref="sentinel" style="height: 1px;"></div>
                    }
                }
                else if (isActivitiesLoading)
                {
                    <Spinner></Spinner>
                }
                else
                {   
                    <div class="p-3">
                        @if (isEditable)
                        {
                            <p class="text-muted">No activities recorded yet.</p>

                            <!-- Encourage user to do an activity -->
                            @if (PlatformService.IsNativeApp())
                            {
                                <a href="record" class="btn btn-primary">Start tracking now!</a>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    <p>Start tracking your activities! Download our app from Google Play:</p>
                                    <a href="https://play.google.com/store/apps/details?id=com.striveup.app" class="btn btn-primary" target="_blank">
                                        Download the App
                                    </a>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">@userName has not recorded any activity yet.</p>
                        }
                    </div>
                }
            </div>
        }

        <!-- Medals Tab -->
        @if (SelectedUserTabType == UserTabType.Medals)
        {
            <div>
                @if (userProfile.Medals?.Any() == true)
                {
                    <div class="row g-2 g-md-3">
                        @for (int i = 0; i < userProfile.Medals.Count; i++)
                        {
                            var medal = userProfile.Medals[i];
                            <div class="col-6 col-sm-4 col-md-2 medal-drop-animation" style="animation-delay:@($"{i * 45}ms")">
                                <MedalCard MedalDto="medal" IsAchieved=true />
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="p-3">
                        @if (isEditable)
                        {
                            <p class="text-muted">No medals earned yet.</p>
                        }
                        else
                        {
                            <p class="text-muted">@userName has not earned any medal yet.</p>
                        }
                    </div>
                }
            </div>
        }

        <!-- Best Efforts -->
        @if (SelectedUserTabType == UserTabType.Statistics)
        {
            @if (BestEffortStatsEntries != null && ActivityStatsEntries != null)
            {
                <div class="custom-select-wrapper px-2">
                    <div class="custom-select-toggle" @onclick="ToggleDropdown">
                        <img src="@ActivityUtils.GetActivityImageUrl(SelectedActivity?.Name, "dark")" class="activity-icon" />
                        <span class="arrow">&#9662;</span>
                    </div>
                    @if (IsDropdownOpen)
                    {
                        <div class="custom-select-dropdown">
                            @foreach (var activity in Activities)
                            {
                                <div class="custom-select-option @(activity == SelectedActivity ? "selected" : "")"
                                        @onclick="() => SelectActivity(activity)">
                                    <img src="@ActivityUtils.GetActivityImageUrl(activity.Name, "dark")" class="activity-icon" />
                                </div>
                            }
                        </div>
                    }
                </div>  
                <!-- Stack all tables in one div to avoid spacing -->
                <div class="d-grid gap-0 pt-3">
                    @if(BestEffortStatsEntries.Any())
                    {     
                        <!-- Table 1 -->
                        <div class="table-responsive">
                            <table class="table table-borderless border-bottom w-100 mb-0">
                                <thead class="table-header text-secondary small fw-normal">
                                    <tr><th colspan="3" class="fw-bold">Best Efforts</th></tr>
                                    <tr>
                                        <th>Segment</th>
                                        <th>@ActivityUtils.GetSpeedOrPaceLabel(SelectedActivity.MeasurementType)</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var effort in BestEffortStatsEntries)
                                    {
                                        <tr @onclick="() => OnEffortClicked(effort)">
                                            <td class="d-none d-md-table-cell">@effort.SegmentName</td>
                                            <td class="d-md-table-cell d-md-none">@effort.SegmentShortName</td>
                                            <td>@ActivityUtils.GetSpeedOrPace(effort.Speed, SelectedActivity.MeasurementType)</td>
                                            <td>@effort.ActivityDate.ToShortDateString()</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    <!-- Table 2 -->
                    <div class="table-responsive">
                        <table class="table table-borderless border-bottom w-100 mb-0">
                            <thead class="table-header text-secondary small fw-normal">
                                <tr><th colspan="2" class="fw-bold">All Time Stats</th></tr>
                            </thead>
                            <tbody>
                                <tr><td>Activities</td><td>@ActivityStatsEntries.TotalActivities</td></tr>
                                <tr><td>Time</td><td>@DateUtils.FormatDuration(ActivityStatsEntries.TotalTime)</td></tr>
                                <tr><td>Distance</td><td>@ActivityStatsEntries.TotalDistance.ToString("F2") km</td></tr>
                                @if (SelectedActivity.ElevationRelevant)
                                {
                                    <tr><td>Elevation Gain</td><td>@ActivityStatsEntries.TotalElevationGain</td></tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Table 3 -->
                    <div class="table-responsive">
                        <table class="table table-borderless border-bottom w-100 mb-0">
                            <thead class="table-header text-secondary small fw-normal">
                                <tr><th colspan="2" class="fw-bold">Current Year</th></tr>
                            </thead>
                            <tbody>
                                <tr><td>Activities</td><td>@ActivityStatsEntries.CurrentYearActivities</td></tr>
                                <tr><td>Distance</td><td>@ActivityStatsEntries.CurrentYearDistance.ToString("F2") km</td></tr>
                                <tr><td>Time</td><td>@DateUtils.FormatDuration(ActivityStatsEntries.CurrentYearTime)</td></tr>
                                @if (SelectedActivity.ElevationRelevant)
                                {
                                    <tr><td>Elevation Gain</td><td>@ActivityStatsEntries.CurrentYearElevationGain</td></tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Table 4 -->
                    <div class="table-responsive">
                        <table class="table table-borderless border-bottom w-100 mb-0">
                            <thead class="table-header text-secondary small fw-normal">
                                <tr><th colspan="2" class="fw-bold">Weekly Averages</th></tr>
                            </thead>
                            <tbody>
                                <tr><td>Activities</td><td>@ActivityStatsEntries.AvgWeeklyActivities</td></tr>
                                <tr><td>Distance</td><td>@ActivityStatsEntries.AvgWeeklyDistance.ToString("F2") km</td></tr>
                                <tr><td>Time</td><td>@DateUtils.FormatDuration(ActivityStatsEntries.AvgWeeklyTime)</td></tr>
                                @if (SelectedActivity.ElevationRelevant)
                                {
                                    <tr><td>Elevation Gain</td><td>@ActivityStatsEntries.AvgWeeklyElevationGain</td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                }
                else
                {
                    <Spinner></Spinner>
                }
            }
    }
    </div>
</div>

<Toast Message="@followErrorMessage" IsError=true OnDismiss="DismissToast"></Toast>


@code {
    [Parameter] public string? Username { get; set; }
    private List<SimpleUserActivityDto> pagedActivities = new();
    private bool isActivitiesLoading = false;
    private bool hasMoreActivities = true;
    private int activityPage = 1;
    private const int ActivityPageSize = 6;
    private ElementReference sentinel;
    private bool observerInitialized = false;
    private DotNetObjectReference<UserProfile>? dotNetRef;
    private bool isLoading = true;
    private string? errorMessage;
    private UserProfileDto userProfile = new();
    private bool isEditable = false;
    private string userName = "";
    private int XPProgress => userProfile.LevelTotalXP == 0
        ? 0
        : (int)((double)userProfile.CurrentXP / userProfile.LevelTotalXP * 100);

    private bool IsDropdownOpen = false;
    private ActivityDto? SelectedActivity;
    private List<ActivityDto> Activities = new();
    private UserActivityStatsDto? ActivityStatsEntries;
    private List<UserBestEffortsStatsDto>? BestEffortStatsEntries;
    private enum UserTabType { Activities, Medals, Statistics }
    private UserTabType SelectedUserTabType = UserTabType.Activities;
    private string followErrorMessage = string.Empty;
    private bool IsFollowing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadInitialProfile();

            if (SelectedUserTabType == UserTabType.Activities)
            {
                await LoadMoreActivities();
            }
        }

        if (SelectedUserTabType == UserTabType.Activities && hasMoreActivities && sentinel.Id != null && !observerInitialized)
        {
            try
            {
                dotNetRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("initIntersectionObserver", sentinel, dotNetRef);
                observerInitialized = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop error: {ex}");
            }
        }
    }

    private async Task ToggleFollow()
    {
        bool originalFollowState =IsFollowing;
        IsFollowing = !originalFollowState;

        try
        {
            bool result;

            if (IsFollowing)
            {
                userProfile.Followers.Add(new SimpleUserDto { UserName = userName });
                result = await FollowService.FollowAsync(userProfile.Id);
            }
            else
            {
                userProfile.Followers.RemoveAt(0);
                result = await FollowService.UnfollowAsync(userProfile.Id);
            }

            if (!result)
            {
                // Revert if operation failed
                IsFollowing = originalFollowState;
                followErrorMessage = $"Error {(IsFollowing ? "unfollowing" : "following")} user {userName}. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            // Revert on exception
            IsFollowing = originalFollowState;
            followErrorMessage = $"Error toggling follow status for user {userName}. Please try again later.";
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private void DismissToast()
    {
        followErrorMessage = null;
    }

    private async Task LoadInitialProfile()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity?.IsAuthenticated == true)
        {
            userName = Username ?? currentUser.Identity.Name;

            var (success, error, profile) = await ProfileService.GetProfile(userName);

            if (success && profile != null)
            {
                userProfile = profile;
                IsFollowing = userProfile.Followers.Any(f => f.UserName == currentUser.Identity.Name);
                isEditable = (userName == currentUser.Identity?.Name);
            }
            else
            {
                errorMessage = error?.Message + Environment.NewLine + error?.Details ?? "An unexpected error occurred.";
            }
        }
        else
        {
            errorMessage = "You are not authenticated.";
        }

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectActivity(ActivityDto activity)
    {
        IsDropdownOpen = false;
        await OnActivitySelected(activity);
    }

    private async Task OnActivitySelected(ActivityDto activity)
    {
        if (SelectedActivity == activity)
            return;

        SelectedActivity = activity;
        await LoadLeaderboardAsync();
    }

    private async Task LoadActivitiesAsync()
    {
        // Load activities with segments from API (combine or separate endpoints)
        Activities = await ActivityService.GetActivitiesWithSegments() ?? new List<ActivityDto>();
        if (Activities.Any())
        {
            SelectedActivity = Activities.First();
            await LoadLeaderboardAsync();
        }
        StateHasChanged();
    }

    private async Task OnTabTypeChanged(UserTabType type)
    {
        if (SelectedUserTabType != type)
        {
            SelectedUserTabType = type;

            if (type == UserTabType.Statistics)
            {
                if (!Activities.Any())
                {
                    await LoadActivitiesAsync();
                }

                if (SelectedActivity != null && (BestEffortStatsEntries == null || ActivityStatsEntries == null))
                {
                    await LoadLeaderboardAsync();
                }
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnEffortClicked(UserBestEffortsStatsDto entry)
    {
        if (entry?.ActivityId != null) Navigation.NavigateTo($"/activity/{entry.ActivityId}");
    }

    private async Task LoadLeaderboardAsync()
    {
        if (SelectedActivity == null) return;

        BestEffortStatsEntries = null;
        ActivityStatsEntries = null;

        var result = await LeaderboardService.GetUserStats(userName, SelectedActivity.Id);

        BestEffortStatsEntries = result.BestEfforts;
        ActivityStatsEntries = result.ActivityStats;

        StateHasChanged();
    }

    [JSInvokable]
    public async Task LoadMoreActivities()
    {
        try
        {
            if (isActivitiesLoading || !hasMoreActivities) return;

            isActivitiesLoading = true;
            StateHasChanged();

            var pageActivities = await ActivityService.GetUserActivitiesAsync(userName, activityPage, ActivityPageSize);

            if (pageActivities != null)
            {
                if (pageActivities.Count < ActivityPageSize)
                {
                    hasMoreActivities = false;
                }

                pagedActivities.AddRange(pageActivities);
                activityPage++;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isActivitiesLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    private void HandleEdit()
    {
        Navigation.NavigateTo("/profile/edit");
    }

    private string GetAvatarUrl() => userProfile.Avatar;

    private string FormatLocation(string? city, string? state, string? country)
    {
        var parts = new[] { city, state, country }.Where(x => !string.IsNullOrWhiteSpace(x));
        return parts.Any() ? string.Join(", ", parts) : "Location not set";
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
