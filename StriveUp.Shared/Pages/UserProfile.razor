@page "/profile"
@inject IAuthService AuthService
@inject ICustomAuthStateProvider AuthStateProvider
@inject HttpClient Http
@inject NavigationManager Navigation
@using StriveUp.Shared.DTOs
@using System.Security.Claims

<PageTitle>User Profile</PageTitle>

<div class="container my-5 pt-2">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else
    {
        <div class="card shadow-lg p-4 rounded">
            <div class="d-flex align-items-center mb-4">
                <img src="@GetAvatarUrl()" alt="Avatar" class="rounded-circle me-3" style="width: 100px; height: 100px; object-fit: cover;" />
                <div>
                    <h3 class="mb-0">@userProfile.FirstName @userProfile.LastName</h3>
                    <small class="text-muted">@userProfile.UserName</small>
                    <p class="mb-0 text-muted">@userProfile.Email</p>
                </div>
                <div class="ms-auto">
                    <button class="btn btn-outline-danger" @onclick="HandleLogout">Logout</button>
                    @if (isEditable)
                    {
                        <button class="btn btn-primary ms-2" @onclick="ToggleEditMode">@(isEditing ? "Cancel" : "Edit")</button>
                    }
                </div>
            </div>

            <hr />

            <h4 class="mt-4">Activity Log</h4>
            @if (userProfile.Activities != null && userProfile.Activities.Any())
            {
                <div class="list-group">
                    @foreach (var activity in userProfile.Activities)
                    {
                        <div class="list-group-item mb-3 shadow-sm rounded border">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>
                                    <h5 class="mb-1">@activity.Title</h5>
                                    <small class="text-muted">@activity.DateStart.ToShortDateString() - @activity.DateEnd.ToShortDateString()</small>
                                </div>
                                <span class="badge bg-secondary">@activity.DurationMinutes min</span>
                            </div>
                            @if (!string.IsNullOrEmpty(activity.Description))
                            {
                                <p class="mb-1"><em>@activity.Description</em></p>
                            }
                            <div class="d-flex justify-content-between align-items-center mt-2">
                                <small>Calories Burned: <strong>@activity.CaloriesBurned</strong></small>
                                <small>Likes: <strong>@activity.LikeCount</strong></small>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">No activities found.</p>
            }
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private UserProfileDto userProfile = new();
    private bool isEditable = false;
    private bool isEditing = false;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated ?? false)
            {
                userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                var response = await Http.GetFromJsonAsync<UserProfileDto>($"user/profile/{userId}");

                if (response != null)
                {
                    userProfile = response;
                    isEditable = userProfile.UserName == currentUser.Identity?.Name;
                }
                else
                {
                    errorMessage = "Could not load user profile.";
                }
            }
            else
            {
                errorMessage = "You are not authenticated.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleEditMode()
    {
        isEditing = !isEditing;
    }

    private void OnProfileSaved(UserProfileDto updatedProfile)
    {
        userProfile = updatedProfile;
        isEditing = false;
    }

    private async Task HandleLogout(MouseEventArgs args)
    {
        await AuthService.LogoutAsync();
    }

    private string GetAvatarUrl()
    {
        return string.IsNullOrWhiteSpace(userProfile.Avatar)
            ? "https://via.placeholder.com/100"
            : userProfile.Avatar;
    }

}
