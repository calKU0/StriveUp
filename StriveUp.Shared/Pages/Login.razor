@page "/login"

<!-- Usings -->
@using Microsoft.AspNetCore.Authorization
@using StriveUp.Shared.DTOs
@using System.Diagnostics

<!-- Injections -->
@inject NavigationManager Nav
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject ITokenStorageService TokenStorageService
@inject IPlatformService PlatformService

<PageTitle>Login</PageTitle>

@if (isLoading)
{
    <Spinner></Spinner>
}
else
{
    @if (isLoggingIn)
    {
        <Spinner Overlay=true></Spinner>
    }

    <div class="d-flex justify-content-center align-items-center login-wrapper">
        <div class="container text-center">
            <img class="mb-4" src="images/StriveUp-logo-dark.png" alt="Logo" width="144" height="144">
            <h5 class="fw-bold">Login to your account</h5>
            <p>Enter your email and password</p>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin"
                        class="text-center align-items-center d-flex flex-column">
                <div class="form-floating col-12 col-md-6 mb-3">
                    <InputText class="form-control" @bind-Value="loginModel.Login"
                                placeholder="email@domain.com" />
                    <label for="floatingInput">Email / Username</label>
                </div>
                <div class="form-floating col-12 col-md-6 mb-3">
                    <InputText class="form-control" @bind-Value="loginModel.Password" type="password"
                                placeholder="Password" />
                    <label for="floatingPassword">Password</label>
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(loginError))
                {
                    <div class="text-danger col-12 col-md-6 mb-3">@loginError</div>
                }
                <button type="submit" class="btn btn-lg btn-warning rounded-3 col-12 col-md-6 mb-3"
                        disabled="@isLoggingIn">
                    Log in
                </button>
            </EditForm>
            

            <p class="text-muted text-center mb-2">or</p>

            <!-- Google Button -->
            <button class="btn login-btn btn-google rounded-3 col-12 col-md-6 mb-3" @onclick="TriggerGoogleLogin"
                    disabled="@isLoggingIn">
                <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/google/google-original.svg" alt="Google" class="icon" />
                Continue with Google
            </button>

            <div class="text-center">
                <p class="text-muted m-0 p-0">Don't have an account yet?</p>
                <a href="" @onclick="RegisterClick" disabled="@isLoggingIn">Register here!</a>
            </div>
        </div>
    </div>
}


@code {
    private LoginRequest loginModel = new();
    private string? loginError;
    private bool isLoading = true;
    private bool isLoggingIn = false;

    protected override async Task OnInitializedAsync()
    {
        AuthService.TokensReceived += OnTokensReceivedFromNative;
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!first) return;

        try
        {
            var uri = Nav.ToAbsoluteUri(Nav.Uri);
            var fragment = uri.Fragment;

            if (!string.IsNullOrWhiteSpace(fragment))
            {
                var parts = System.Web.HttpUtility.ParseQueryString(fragment.TrimStart('#'));
                var accessToken = parts["access_token"];
                var refreshToken = parts["refresh_token"];

                if (!string.IsNullOrWhiteSpace(accessToken) && !string.IsNullOrWhiteSpace(refreshToken))
                {
                    var jwt = new JwtResponse
                    {
                        Token = accessToken,
                        RefreshToken = refreshToken
                    };

                    await AuthService.ExternalLoginAsync(jwt);
                    Nav.NavigateTo("/");
                    return;
                }

                loginError = "Missing tokens in external login response.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            loginError = "Unexpected error during external login.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task HandleLogin()
    {
        loginError = string.Empty;
        isLoggingIn = true;
        StateHasChanged();

        var (success, error) = await AuthService.LoginAsync(loginModel);

        isLoggingIn = false;

        if (success)
        {
            loginError = null;
            Nav.NavigateTo("/");
        }
        else
        {
            loginError = error ?? "Invalid email or password. Please try again.";
            StateHasChanged();
        }
    }

    private void RegisterClick()
    {
        Nav.NavigateTo("/register");
    }

    private async Task TriggerGoogleLogin()
    {
        isLoggingIn = true;

        if (!PlatformService.IsNativeApp())
        {
            // Web: just navigate to your API login endpoint with web return URL
            var url = "https://striveupapi-emaee9awang6g4ht.polandcentral-01.azurewebsites.net/api/auth/google-login?returnUrl=https://kkurowski.striveup.com/login";
            //var url = "https://localhost:7116/api/auth/google-login";
            Nav.NavigateTo(url, forceLoad: true);
        }
        else
        {
            // Native: use platform-specific OAuth launcher
            await AuthService.StartNativeGoogleLoginAsync();
        }
    }

    private async Task OnTokensReceivedFromNative(string accessToken, string refreshToken)
    {
        var jwt = new JwtResponse
        {
            Token = accessToken,
            RefreshToken = refreshToken
        };

        await AuthService.ExternalLoginAsync(jwt);
        Nav.NavigateTo("/");
    }
}
