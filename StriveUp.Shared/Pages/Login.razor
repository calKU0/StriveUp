@page "/login"
@using Microsoft.AspNetCore.Authorization
@using StriveUp.Shared.DTOs
@using System.Diagnostics
@inject NavigationManager Nav
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject ITokenStorageService TokenStorageService
@attribute [AllowAnonymous]

@if (isLoading)
{
    <Spinner></Spinner>
}
else
{
    <div class="d-flex justify-content-center align-items-center login-wrapper">
        <div class="container text-center">
            <img class="mb-4" src="images/StriveUp-logo-dark.png" alt="Logo" width="144" height="144">
            <h5 class="fw-bold">Login to your account</h5>
            <p>Enter your email and password</p>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin"
            class="text-center align-items-center d-flex flex-column">
                <div class="form-floating col-12 col-md-6 mb-3">
                    <InputText class="form-control" @bind-Value="loginModel.Username"
                    placeholder="email@domain.com" />
                    <label for="floatingInput">Email</label>
                </div>
                <div class="form-floating col-12 col-md-6 mb-3">
                    <InputText class="form-control" @bind-Value="loginModel.Password" type="password"
                    placeholder="Password" />
                    <label for="floatingPassword">Password</label>
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(loginError))
                {
                    <div class="text-danger col-12 col-md-6 mb-3">@loginError</div>
                }
                <button type="submit" class="btn btn-lg btn-warning rounded-3 col-12 col-md-6 mb-3">Log in</button>
            </EditForm>

            <p class="text-muted text-center mb-2">or</p>

            <!-- Google Button -->
            <button class="btn login-btn btn-google rounded-3 col-12 col-md-6 mb-3" @onclick="TriggerGoogleLogin">
                <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/google/google-original.svg" alt="Google" class="icon">
                Continue with Google
            </button>

            <!-- Apple Button -->
@*             <button class="btn login-btn btn-apple rounded-3 col-12 col-md-6 mb-3">
                <img src="https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg" alt="Apple" class="icon">
                Continue with Apple
            </button> *@

            <div class="text-center">
                <p class="text-muted m-0 p-0">Don't have an account yet?</p>
                <a href="" @onclick="RegisterClick">Register here!</a>
            </div>
        </div>
    </div>
}

@code {
    private LoginRequest loginModel = new();
    private string? loginError;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!first) return;

        try
        {
            var uri = Nav.ToAbsoluteUri(Nav.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var token = query["token"];

            if (!string.IsNullOrWhiteSpace(token))
            {
                var (success, error) = await AuthService.ExternalLoginAsync(token);
                if (success)
                {
                    Nav.NavigateTo("/");
                }
                else
                {
                    loginError = error ?? "External login failed.";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            loginError = "Unexpected error during external login.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }



    private async Task HandleLogin()
    {
        var (success, error) = await AuthService.LoginAsync(loginModel);

        if (success)
        {
            loginError = null;
            Nav.NavigateTo("/");
        }
        else
        {
            loginError = error ?? "Invalid email or password. Please try again.";
        }
    }

    private void RegisterClick()
    {
        Nav.NavigateTo("/register");
    }

    private void TriggerGoogleLogin()
    {
        Nav.NavigateTo("https://localhost:7116/api/auth/google-login", forceLoad: true);
    }
}
