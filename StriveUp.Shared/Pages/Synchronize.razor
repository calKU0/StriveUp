@page "/synchronize"

<!-- Usings -->
@using StriveUp.Shared.DTOs

<!-- Injections -->
@inject NavigationManager Navigation
@inject ISynchroService SynchroService
@inject IJSRuntime JS
@inject ICustomAuthStateProvider AuthStateProvider

<PageTitle>Synchronize</PageTitle>

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold">Connected Services</h2>
        <button class="btn btn-primary" @onclick="OpenModal">
            <i class="bi bi-plus-lg me-1"></i> Add
        </button>
    </div>

    @if (isLoading)
    {
        <Spinner text="Loading..."></Spinner>
    }
    else if (userSynchros == null || userSynchros.Count == 0)
    {
        <div class="text-center py-5 text-muted">
            <p class="mb-3">You haven't connected any services yet.</p>
            <button class="btn btn-primary" @onclick="OpenModal">Connect Service</button>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var sync in userSynchros)
            {
                <div class="col-12 col-md-6">
                    <div class="card shadow-sm sync-card">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center gap-3">
                                <img src="@sync.IconUrl" alt="Icon" class="rounded" style="width: 40px; height: 40px; object-fit: contain;" />
                                <div>
                                    <h5 class="card-title mb-0">@sync.SynchroProviderName</h5>
                                    <small class="text-muted">Status: @(sync.IsActive ? "Active" : "Inactive")</small>
                                </div>
                            </div>

                            <div class="d-flex align-items-center gap-2">
                                <div class="form-check form-switch m-0">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           checked="@sync.IsActive"
                                           @onchange="(e => ToggleIsActive(sync, e.Value))" />
                                </div>
                                <button class="btn btn-sm btn-outline-danger"
                                        title="Delete"
                                        @onclick="() => DeleteSynchro(sync.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Bootstrap Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Connect a Service</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3 text-muted">Select a service to connect:</p>

                    <div class="row g-3 mb-4">
                        @foreach (var provider in availableProviders)
                        {
                            var isActive = provider.IsActive;
                            var isSelected = selectedProvider?.Id == provider.Id;

                            <div class="col-6 col-md-4">
                                <div class="card h-100 text-center p-2 border @(isSelected ? "border-primary" : "") @(isActive ? "" : "opacity-50")"
                                     style="cursor: @(isActive ? "pointer" : "not-allowed");"
                                     @onclick="@(isActive ? (() => SelectProvider(provider)) : null)">
                                    <img src="@provider.IconUrl" alt="Icon" class="mx-auto" style="width: 40px; height: 40px; object-fit: contain;" />
                                    <div class="mt-2 small fw-semibold">@provider.Name</div>
                                    @if (!isActive)
                                    {
                                        <div class="text-muted" style="font-size: 0.75rem; line-height: 1rem;"><i>Coming soon</i></div>
                                    }
                                </div>
                            </div>
                        }

                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<UserSynchroDto> userSynchros = new();
    private List<SynchroProviderDto> availableProviders = new();
    private SynchroProviderDto selectedProvider = new();
    private bool showModal = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated == false)
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var code = query["code"];
            var state = query["state"];

            if (!string.IsNullOrWhiteSpace(code))
            {
                isLoading = true;
                StateHasChanged();

                HttpResponseMessage response = await SynchroService.ExchangeCodeAsync(code, state);

                Navigation.NavigateTo("/synchronize", true);

                if (!response.IsSuccessStatusCode)
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Google Fit token exchange failed: " + error);
                }

                await LoadData();
                isLoading = false;
                StateHasChanged();
            }
            else
            {
                await LoadData();
                isLoading = false;
                StateHasChanged();
            }
        }
    }


    private async Task LoadData()
    {
        try
        {
            userSynchros = await SynchroService.GetUserSynchrosAsync();
            availableProviders = await SynchroService.GetAvailableProvidersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void OpenModal()
    {
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }


    private async Task ToggleIsActive(UserSynchroDto sync, object? newValue)
    {
        if (newValue is not bool newIsActive)
            return;

        sync.IsActive = newIsActive;

        var updateDto = new UpdateUserSynchroDto
        {
            IsActive = sync.IsActive
        };

        var response = await SynchroService.UpdateUserSynchroAsync(sync.Id, updateDto);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("Failed to update IsActive");
            sync.IsActive = !newIsActive;
        }
    }

    private async Task SelectProvider(SynchroProviderDto provider)
    {
        selectedProvider = provider;
        var authUrl = SynchroService.GetOAuthUrl(provider.Name.ToLower().Replace(" ", ""));
        await JS.InvokeVoidAsync("open", authUrl, "_self");
        
    }

    private async Task DeleteSynchro(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this service?");
        if (!confirmed) return;

        var response = await SynchroService.DeleteUserSynchroAsync(id);
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
        }
        else
        {
            Console.WriteLine("Failed to delete UserSynchro.");
        }
    }
}

