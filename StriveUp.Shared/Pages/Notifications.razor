@page "/notifications"

@inject ICustomAuthStateProvider AuthStateProvider
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject INotificationStateService NotificationStateService
@implements IDisposable

<PageTitle>Notifications</PageTitle>

<div class="container-fluid px-0 mx-0">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="p-0">
                @if (notifications.Count == 0)
                {
                    <div class="text-center p-4 text-muted">
                        <i class="bi bi-inbox fs-1 d-block mb-2"></i>
                        No notifications yet.
                    </div>
                }
                else
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var notif in notifications)
                        {
                            <NotificationItem Notification="notif" OnClick="OnNotificationClick" />
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<NotificationDto> notifications = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            if (currentUser.Identity?.IsAuthenticated ?? false)
            {
                notifications = await NotificationService.GetMyNotificationsAsync();

                foreach (var notif in notifications)
                {
                    notif.TimeAgo = await JS.InvokeAsync<string>("getTimeAgo", notif.CreatedAt.ToUniversalTime().ToString("o"));
                }

                // Update unread count in shared state
                NotificationStateService.UnreadCount = notifications.Count(n => !n.IsRead);
            }
            else
            {
                Navigation.NavigateTo("/login");
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnNotificationClick(NotificationDto notif)
    {
        if (!notif.IsRead)
        {
            notif.IsRead = true;

            // Update unread count in shared state immediately (optimistic UI)
            NotificationStateService.UnreadCount = notifications.Count(n => !n.IsRead);

            StateHasChanged();

            await NotificationService.MarkAsReadAsync(notif.Id);
        }

        Navigation.NavigateTo(notif.RedirectUrl);
    }

    public void Dispose()
    {
        _ = MarkAllAsReadOnExitAsync();
    }

    private async Task MarkAllAsReadOnExitAsync()
    {
        try
        {
            foreach (var notif in notifications)
            {
                notif.IsRead = true;
            }

            NotificationStateService.UnreadCount = 0;

            StateHasChanged();

            await NotificationService.MarkAllAsReadAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to mark notifications as read on exit: {ex}");
        }
    }
}
