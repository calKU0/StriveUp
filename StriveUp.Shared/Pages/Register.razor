@page "/register"

<!-- Usings -->
@using System.Diagnostics
@using Microsoft.AspNetCore.Authorization
@using StriveUp.Shared.DTOs
@using SkiaSharp

<!-- Injections -->
@inject NavigationManager Nav
@inject IAuthService AuthService

<PageTitle>Register</PageTitle>

<div class="d-flex justify-content-center align-items-center">
    <div class="container text-center pt-0 pt-md-2">
        @if (IsRegistering)
        {
            <Spinner Overlay=true></Spinner>
        }
        <img class="mb-4" src="images/StriveUp-logo-dark.png" alt="Logo" width="144" height="144">
        <h5 class="fw-bold">Register</h5>
        <p>Enter your email and password</p>
        <fieldset disabled="@IsRegistering" style="border:none; padding:0; margin:0;">
            <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                <div class="row register-form-row justify-content-center g-3 pb-3">
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" placeholder="First Name" />
                        <label for="firstName">First Name</label>
                    </div>
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" placeholder="Last Name" />
                        <label for="lastName">Last Name</label>
                    </div>
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="username" class="form-control" @bind-Value="registerModel.Username" placeholder="Username"/>
                        <label for="username">Username</label>
                    </div>
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" type="email" placeholder="Email"/>
                        <label for="email">Email</label>
                    </div>
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="password" class="form-control" @bind-Value="registerModel.Password" type="password" placeholder="Password"/>
                        <label for="password">Password</label>
                    </div>
                    <!-- Repeat Password -->
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="repeatPassword" class="form-control" @bind-Value="registerModel.RepeatPassword" type="password" placeholder="Repeat Password" />
                        <label for="repeatPassword">Repeat Password</label>
                    </div>
                    <!-- Bio -->
                    <div class="form-floating col-12">
                        <InputTextArea id="bio" class="form-control" @bind-Value="registerModel.Bio" placeholder="Bio" />
                        <label for="bio">Bio</label>
                    </div>

                    <!-- Gender -->
                    <div class="form-floating col-12 col-md-6">
                        <InputSelect id="gender" class="form-control" @bind-Value="registerModel.Gender">
                            <option value="">Select Gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                        <label for="gender">Gender</label>
                    </div>

                    <!-- Birthday -->
                    <div class="form-floating col-12 col-md-6">
                        <InputDate id="birthday" class="form-control" @bind-Value="registerModel.Birthday" />
                        <label for="birthday">Birthday</label>
                    </div>

                    <!-- Country -->
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="country" class="form-control" @bind-Value="registerModel.Country" placeholder="Country" />
                        <label for="country">Country</label>
                    </div>

                    <!-- State -->
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="state" class="form-control" @bind-Value="registerModel.State" placeholder="State" />
                        <label for="state">State</label>
                    </div>

                    <!-- City -->
                    <div class="form-floating col-12 col-md-6">
                        <InputText id="city" class="form-control" @bind-Value="registerModel.City" placeholder="City" />
                        <label for="city">City</label>
                    </div>

                    <div class="col-12 col-md-6">
                        <label for="avatarUpload" class="form-label">Upload Avatar (optional)</label>
                        <!-- Custom Circle Button for file selection -->
                        <label for="avatarUpload" class="btn btn-light rounded-circle p-3" style="cursor: pointer;">
                            <span>Select File</span>
                            <InputFile id="avatarUpload" OnChange="HandleFileChange" class="d-none"/>
                        </label>

                        <!-- Display Cropped Image -->
                        @if (!string.IsNullOrWhiteSpace(croppedImageUrl))
                        {
                            <div class="avatar-preview mt-2">
                                <img src="@croppedImageUrl" alt="Avatar preview" class="rounded-circle" style="width: 100px; height: 100px; object-fit: cover;"/>
                            </div>
                        }
                    </div>
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (errorMessages.Any())
                {
                    <div class="alert alert-danger">
                        <ul>
                            @foreach (var error in errorMessages)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </div>
                }
                <button type="submit" class="btn btn-lg btn-warning rounded-3 col-12 col-md-6 mb-3">Register</button>
            </EditForm>
        </fieldset>

        <p class="text-muted text-center mb-2">or</p>
        <div class="text-center mb-2">
            <p class="text-muted">Have an account?</p>
            <a href="" @onclick="LoginClick">Login here!</a>
        </div>

        <!-- Google Button -->
        <button class="btn login-btn btn-google rounded-3 col-12 col-md-6 mb-3" @onclick="TriggerGoogleLogin">
            <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/google/google-original.svg" alt="Google" class="icon">
            Continue with Google
        </button>

        <!-- Apple Button -->
@*         <button class="btn login-btn btn-apple rounded-3 col-12 col-md-6 mb-3">
            <img src="https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg" alt="Apple" class="icon">
            Continue with Apple
        </button> *@
    </div>
</div>

@code {
    private RegisterRequest registerModel = new();
    private string? imageDataUrl;
    private string? croppedImageUrl;
    private List<string> errorMessages = new();
    private string? successMessage;
    private bool IsRegistering = false;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!first) return;

        try
        {
            var uri = Nav.ToAbsoluteUri(Nav.Uri);
            var fragment = uri.Fragment;

            if (!string.IsNullOrWhiteSpace(fragment))
            {
                var parts = System.Web.HttpUtility.ParseQueryString(fragment.TrimStart('#'));
                var accessToken = parts["access_token"];
                var refreshToken = parts["refresh_token"];

                if (!string.IsNullOrWhiteSpace(accessToken) && !string.IsNullOrWhiteSpace(refreshToken))
                {
                    var jwt = new JwtResponse
                    {
                        Token = accessToken,
                        RefreshToken = refreshToken
                    };

                    await AuthService.ExternalLoginAsync(jwt);
                    Nav.NavigateTo("/");
                    return;
                }

                errorMessages.Add("Missing tokens in external login response.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessages.Add("Unexpected error during external login.");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task HandleRegister()
    {
        errorMessages.Clear();
        successMessage = null;
        IsRegistering = true;

        try
        {
            var croppedImageBase64 = croppedImageUrl?.Substring(croppedImageUrl.IndexOf(',') + 1);
            if (!string.IsNullOrWhiteSpace(croppedImageBase64))
            {
                registerModel.AvatarBase64 = croppedImageBase64;
            }

            var (success, errors) = await AuthService.RegisterAsync(registerModel);

            if (success)
            {
                successMessage = "Registration successful!";
                Nav.NavigateTo("/");
            }
            else
            {
                errorMessages = errors ?? new List<string> { "Registration failed." };
            }
        }
        catch (Exception ex)
        {
            errorMessages.Add($"Unexpected error: {ex.Message}");
        }
        finally
        {
            IsRegistering = false;
            StateHasChanged();
        }
    }

    private void LoginClick()
    {
        Nav.NavigateTo("/login");
    }

    private void TriggerGoogleLogin()
    {
        Nav.NavigateTo("https://localhost:7116/api/auth/google-login", forceLoad: true);
    }


    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = file.OpenReadStream(maxAllowedSize: 1 * 1024 * 1024); // 1 MB
        var buffer = new byte[file.Size];

        var bytesRead = 0;
        while (bytesRead < file.Size)
        {
            bytesRead += await stream.ReadAsync(buffer.AsMemory(bytesRead));
        }

        var base64Data = Convert.ToBase64String(buffer);
        imageDataUrl = $"data:{file.ContentType};base64,{base64Data}";

        // Call image resize and crop logic
        await ResizeAndCropImageAsync(imageDataUrl);
    }


    private async Task ResizeAndCropImageAsync(string imageDataUrl)
    {
        try
        {
            var base64Data = imageDataUrl.Substring(imageDataUrl.IndexOf(',') + 1);
            var imageBytes = Convert.FromBase64String(base64Data);

            // Load image using SkiaSharp
            using var inputStream = new SKMemoryStream(imageBytes);
            using var originalImage = SKBitmap.Decode(inputStream);

            if (originalImage == null)
            {
                Console.WriteLine("Failed to decode image.");
                return;
            }

            const int targetWidth = 256;
            const int targetHeight = 256;

            // Calculate new size while preserving aspect ratio
            float ratioX = (float)targetWidth / originalImage.Width;
            float ratioY = (float)targetHeight / originalImage.Height;
            float ratio = Math.Min(ratioX, ratioY);

            int newWidth = (int)(originalImage.Width * ratio);
            int newHeight = (int)(originalImage.Height * ratio);

            // Resize
            using var resizedImage = originalImage.Resize(new SKImageInfo(newWidth, newHeight), SKFilterQuality.High);

            // Center crop to 256x256
            using var croppedImage = new SKBitmap(targetWidth, targetHeight);
            using (var canvas = new SKCanvas(croppedImage))
            {
                canvas.Clear(SKColors.Transparent);

                int xOffset = (targetWidth - newWidth) / 2;
                int yOffset = (targetHeight - newHeight) / 2;

                canvas.DrawBitmap(resizedImage, xOffset, yOffset);
            }

            // Encode to PNG
            using var image = SKImage.FromBitmap(croppedImage);
            using var data = image.Encode(SKEncodedImageFormat.Png, 100);
            var croppedBytes = data.ToArray();

            // Convert to base64
            var croppedBase64 = Convert.ToBase64String(croppedBytes);

            // Update UI-related data
            croppedImageUrl = $"data:image/png;base64,{croppedBase64}";
            registerModel.AvatarBase64 = croppedImageUrl;

            StateHasChanged();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error processing image: " + ex.Message);
        }
    }
}
