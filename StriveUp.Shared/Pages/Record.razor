@page "/record"

<!-- Usings -->
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.Devices.Sensors
@using Microsoft.Maui.Storage
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Activity
@using System.Diagnostics


<!-- Injections -->
@inject IAppSettingsService AppSettingsService
@inject IActivityTrackingService ActivityTrackingService
@inject IJSRuntime JSRuntime
@inject IActivityService ActivityService
@inject ISecurableService SecurableService
@inject IBleHeartRateService HeartRateService
@inject NavigationManager Navigation
@inject ICustomAuthStateProvider AuthStateProvider
@inject IPlatformService PlatformService
@inject IAppStateService AppStateService
@inject IProfileService ProfileService
@implements IDisposable

<PageTitle>Record</PageTitle>

@if (!PlatformService.IsNativeApp())
{
    <!-- Show Not Found or Redirect -->
    <LayoutView Layout="typeof(Layout.MainLayout)">
        <h3>This page is not available on the web.</h3>
        <p>Please use the mobile app to access tracking.</p>
    </LayoutView>
}


<div class="page-wrapper container-full @(mapVisible ? "map-visible" : "")">
    @if (isLoadingLocation)
    {
        <Spinner text="Acquiring GPS..."></Spinner>
    }
    else
    {
        if (isSaving)
        {
            <Spinner Overlay=true></Spinner>
        }

        <div class="slides">
            @if (!selectedActivity.Indoor)
            {
                <div class="map-section @(isTracking || isPaused ? "expanded" : "")">
                    <div id="map"></div>
                </div>
            }

            <div class="controls">
                <ActivityControls AvailableActivities="availableActivities"
                SelectedActivity="@selectedActivity"
                IsTracking="@isTracking"
                IsPaused="@isPaused"
                SelectedActivityChanged="@((ActivityDto a) => OnSelectedActivityChanged(a))"
                OnSelectedSensorChanged="s => sensor = s"
                OnStartClick="@ToggleTracking"
                OnStopClick="@ToggleTracking"
                OnResumeClick="@ResumeTracking"
                OnFinishClick="@ShowFinishModal" />
            </div>
        </div>
        @if (isTracking || isPaused)
        {
            <div class="slides tiles-slide" id="tracking-section">
                <div class="tiles-wrapper p-2">
                    <!-- Info Tiles -->
                    <div class="row g-3">
                        @if(selectedActivity.DistanceRelevant)
                        {
                            <InfoTile Label="Distance" Value="@($"{Distance/1000.0:F2} km")" IconClass="fas fa-route" />
                            <!-- Conditional display of Speed or Pace -->
                            @if (selectedActivity.SpeedRelevant)
                            {
                                <InfoTile Label="@GetSpeedOrPaceLabel()" Value="@GetSpeedOrPace()" IconClass="fas fa-tachometer-alt" />
                            }
                        }
                        <InfoTile Label="Heart Rate" Value="@($"{HeartRate} bpm")" IconClass="fas fa-heartbeat" />
                        <InfoTile Label="Duration" Value="@Duration.ToString(@"hh\:mm\:ss")" IconClass="fas fa-stopwatch" />
                        @if (selectedActivity.ElevationRelevant)
                        {
                            <InfoTile Label="Elevation" Value="@($"{(int)Math.Round(elevation)} m")"/>
                        }
                        <InfoTile Label="Kcal" Value="@(((int)Math.Round(CaloriesBurned)).ToString())" />
                    </div>
                </div>
            </div>
        }
    }
</div>

<FinishModal Show="@showFinishModal"
Duration="@Duration"
Title="@activityTitle"
Description="@activityDescription"
OnSave="@SaveActivityWithMeta"
OnDiscard="@DiscardActivity"
OnResume="@ResumeTracking"
IsSaving=@isSaving/>



@code {
    private List<ActivityHrDto> HrData = new();
    private List<ActivitySpeedDto> SpeedData = new();
    private List<ActivityElevationDto> ElevationData = new();
    private string selectedDeviceId = string.Empty;
    private List<Location> route = new();
    private List<ActivityDto> availableActivities = new();
    private bool isPaused = false;
    private ActivityDto selectedActivity = new();
    private bool isTracking = false;
    private bool mapVisible = false;
    private bool mapInitialized = false;
    private Location? currentLocation;
    private int Distance = 0;
    private double elevation = 0; 
    private double Speed = 0;
    private int HeartRate = 0;
    private TimeSpan Duration = TimeSpan.Zero;
    private DateTime startTime;
    private double currentHeading = 0;
    private CancellationTokenSource? durationCts;
    private bool isLoadingLocation = true;
    private string mapToken = string.Empty;
    private Location? lastLocation;
    private bool showFinishModal = false;
    private string activityTitle = "My Activity";
    private string activityDescription = string.Empty;
    private bool isSaving = false;
    private BluetoothDeviceDto sensor = new();
    private double CaloriesBurned = 0;

    private const double MinAltitudeChange = 1.5; // meters
    private const double MaxAltitudeJump = 15.0;  // meters
    private const double MinDistanceDelta = 0.5;  // meters — ignore "vibration"
    private const double MaxDistanceJump = 100.0; // meters — sanity check


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated == false)
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        var activities = await ActivityService.GetAvailableActivitiesAsync();
        if (activities != null)
            availableActivities = activities;

        selectedActivity = availableActivities.FirstOrDefault();

        mapToken = await SecurableService.GetMapboxTokenAsync();

        if (!selectedActivity.Indoor)
        {
            _ = RequestPermissionsAndStartGps();
            StartCompass();
        }
    }  

    private void OnPositionChangedSync(object sender, Microsoft.Maui.Devices.Sensors.Location location)
    {
        _ = OnPositionChanged(location);
    }

    private async Task RequestPermissionsAndStartGps()
    {
        if (!await CheckAndRequestLocationPermission()) return;
        if (!await CheckAndRequestNotificationPermission()) return;

        // Check if background activity is already allowed before asking

        if (AppSettingsService.IsRealmeDevice() && !Preferences.Get("BackgroundActivityPromptShown", false))
        {
            Preferences.Set("BackgroundActivityPromptShown", true);
            bool showPrompt = await ShowPrompt(
                "⚠️ On Realme devices, please enable 'Allow background activity' manually:\n\n" +
                "1. Open Settings\n" +
                "2. Tap 'Battery'\n" +
                "3. Tap 'More settings'\n" +
                "4. Tap 'App battery management'\n" +
                "5. Select StriveUp\n" +
                "6. Enable 'Allow background activity'\n\n" +
                "Would you like to open these settings now?"
            );

            if (showPrompt)
            {
                AppSettingsService.PromptUserToAllowBackgroundActivity();
            }
        }
        

        // Proceed to start tracking
        try
        {
            var config = await ProfileService.GetUserConfig();
            if (!string.IsNullOrEmpty(config?.SensorId))
            {
                sensor = new BluetoothDeviceDto
                {
                    Id = config.SensorId,
                    Name = config.SensorName
                };
            }

            isLoadingLocation = true;
            ActivityTrackingService.LocationUpdated += OnPositionChangedSync;
            await ActivityTrackingService.StartAsync(selectedActivity.Indoor, false);

            // Wait for initial location fix
            int maxAttempts = 20;
            int attempt = 0;
            while (currentLocation == null && attempt++ < maxAttempts)
            {
                currentLocation = await ActivityTrackingService.GetLastKnownLocationAsync();
                await Task.Delay(1000);
            }

            await InitializeMap(currentLocation);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"GPS Start Exception: {ex.Message}");
        }

        isLoadingLocation = false;
        await InvokeAsync(StateHasChanged);
    }


    private async Task<bool> CheckAndRequestLocationPermission()
    {
        var status = await Permissions.CheckStatusAsync<Permissions.LocationAlways>();
        if (status != PermissionStatus.Granted)
            status = await Permissions.RequestAsync<Permissions.LocationAlways>();

        if (status != PermissionStatus.Granted)
        {
            bool shouldOpen = await ShowPrompt("Background location is required to track your activity. Open app settings?");
            if (shouldOpen) AppSettingsService.OpenAppSettings();
            Navigation.NavigateTo("/");
            return false;
        }

        return true;
    }

    private async Task<bool> CheckAndRequestNotificationPermission()
    {
        var status = await Permissions.CheckStatusAsync<Permissions.PostNotifications>();
        if (status != PermissionStatus.Granted)
            status = await Permissions.RequestAsync<Permissions.PostNotifications>();

        if (status != PermissionStatus.Granted)
        {
            bool shouldOpen = await ShowPrompt("Notification permission is required to show tracking status. Open app settings?");
            if (shouldOpen) AppSettingsService.OpenAppSettings();
            Navigation.NavigateTo("/");
            return false;
        }

        return true;
    }

    private async Task<bool> ShowPrompt(string message)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", message);
    }


    private async Task OnPositionChanged(Microsoft.Maui.Devices.Sensors.Location position)
    {
        var location = new Location(position.Latitude, position.Longitude, position.Timestamp)
        {
            Speed = position.Speed,
            Altitude = position.Altitude,
        };

        double distanceMoved = currentLocation != null
            ? Location.CalculateDistance(currentLocation.Latitude, currentLocation.Longitude, location, DistanceUnits.Kilometers)
            : 0;

        bool isInBackground = AppStateService.IsInBackground;
        double acceptableAccuracy = isInBackground ? 20 : 20;

        Console.WriteLine("Got Location with accuracy = " + position.Accuracy + " Background = " + isInBackground);
        if (position.Accuracy > acceptableAccuracy && currentLocation != null)
        {
            return;
        }

        currentLocation = location;

        try
        {
            await InvokeAsync(() => JSRuntime.InvokeVoidAsync("updateMap", currentLocation.Latitude, currentLocation.Longitude, isTracking, false));           
        }
        catch (Exception ex)
        {
            Debug.WriteLine("JS update map failed: " + ex.Message);
        }

        if (isTracking)
        {
            UpdateTrackingData(location);
        }
    }


    private void UpdateTrackingData(Location location)
    {
        bool isValidData = false;
        double distanceDelta = 0;
        double timeDeltaSeconds = 0;

        if (lastLocation != null)
        {
            distanceDelta = Location.CalculateDistance(lastLocation, location, DistanceUnits.Kilometers) * 1000;
            timeDeltaSeconds = (location.Timestamp - lastLocation.Timestamp).TotalSeconds;

            // --- Distance Filtering ---
            if (distanceDelta >= MinDistanceDelta && distanceDelta <= MaxDistanceJump)
            {
                Distance += (int)Math.Round(distanceDelta);
                isValidData = true;
            }

            // --- Speed Estimation ---
            if (timeDeltaSeconds > 0 && distanceDelta >= MinDistanceDelta)
            {
                double deltaSpeed = distanceDelta / timeDeltaSeconds; // m/s
                Speed = location.Speed ?? deltaSpeed;
            }

            // --- Elevation Gain Filtering ---
            if (lastLocation.Altitude.HasValue && location.Altitude.HasValue)
            {
                double altitudeDelta = location.Altitude.Value - lastLocation.Altitude.Value;

                if (altitudeDelta > MinAltitudeChange && altitudeDelta < MaxAltitudeJump)
                {
                    elevation += altitudeDelta;
                    isValidData = true;
                }
            }
        }

        // Only update state and data lists if meaningful data was recorded
        if (isValidData)
        {
            lastLocation = location;
            route.Add(location);

            var timestamp = location.Timestamp.UtcDateTime;

            SpeedData.Add(new ActivitySpeedDto
            {
                SpeedValue = Speed,
                TimeStamp = timestamp
            });

            if (location.Altitude.HasValue)
            {
                ElevationData.Add(new ActivityElevationDto
                {
                    ElevationValue = location.Altitude.Value,
                    TimeStamp = timestamp
                });
            }
        }
    }


    private async Task OnSelectedActivityChanged(ActivityDto activity)
    {
        if (selectedActivity == activity)
        {
            return;
        }

        selectedActivity = activity;
        if (selectedActivity.Indoor)
        {
            mapInitialized = false;
            await ActivityTrackingService.StopAsync();
            StopCompass();
        }
        else
        {
            StartCompass();
            _ = RequestPermissionsAndStartGps();           
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task ConnectHrDevice(BluetoothDeviceDto device)
    {
        selectedDeviceId = device.Id;
        var success = await HeartRateService.ConnectAsync(selectedDeviceId);
        if (success)
        {
            HeartRateService.OnHeartRateChanged += (hr) =>
            {
                if (isTracking)
                {
                    HeartRate = hr;
                }
            };
        }
    }


    private void ToggleTracking()
    {
        if (isTracking)
        {
            _ = StopTracking();
        }
        else
        {
            _ = StartTracking();
        }
    }


    private async Task StartTracking()
    {
        _ = ConnectHrDevice(sensor);
        isTracking = true;
        startTime = DateTime.UtcNow;
        route.Clear();
        durationCts = new CancellationTokenSource();
        await ActivityTrackingService.StartAsync(selectedActivity.Indoor, true);
        await InvokeAsync(StateHasChanged);

        await JSRuntime.InvokeVoidAsync("scrollToTrackingSection");
        _ = UpdateActivityData(durationCts.Token); 
        _ = JSRuntime.InvokeVoidAsync("resizeMap");
    }


    private async Task UpdateActivityData(CancellationToken token)
    {
        try
        {
            while (!token.IsCancellationRequested)
            {
                CaloriesBurned = (selectedActivity.AverageCaloriesPerHour / 3600.0) * Duration.TotalSeconds;
                if (HeartRate > 0)
                {
                    HrData.Add(new ActivityHrDto
                    {
                        HearthRateValue = HeartRate,
                        TimeStamp = DateTime.UtcNow
                    });
                }
                Duration = DateTime.UtcNow - startTime;

                if (!AppStateService.IsInBackground)
                {
                    await InvokeAsync(() => StateHasChanged());
                }
                await Task.Delay(1000, token);
            }
        }
        catch (TaskCanceledException) { }
    }

    private async Task StopTracking()
    {
        try
        {
            isTracking = false;
            isPaused = true;
            durationCts?.Cancel();
            durationCts?.Dispose();
            await ActivityTrackingService.PauseAsync();
            _ = JSRuntime.InvokeVoidAsync("resizeMap");
            await InvokeAsync(StateHasChanged);
        }
        catch
        {

        }
    }

    private async Task ResumeTracking()
    {
        isPaused = false;
        showFinishModal = false;
        isTracking = true;
        durationCts = new CancellationTokenSource();

        await ActivityTrackingService.ResumeAsync(selectedActivity.Indoor);
        _ = UpdateActivityData(durationCts.Token);
        _ = JSRuntime.InvokeVoidAsync("resizeMap");
    }

    private void ShowFinishModal()
    {
        var activityName = selectedActivity.Name;

        // Get current part of day
        var now = DateTime.Now.TimeOfDay;

        string timeOfDay;
        if (now < TimeSpan.FromHours(11))
            timeOfDay = "Morning";
        else if (now < TimeSpan.FromHours(14))
            timeOfDay = "Lunch";
        else if (now < TimeSpan.FromHours(18))
            timeOfDay = "Afternoon";
        else
            timeOfDay = "Evening";

        activityTitle = $"{timeOfDay} {activityName}";
        showFinishModal = true;
    }

    private async Task DiscardActivity()
    {
        await JSRuntime.InvokeVoidAsync("clearRoute");

        showFinishModal = false;
        isPaused = false;
        Distance = 0;
        Speed = 0;
        Duration = TimeSpan.Zero;
        route.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveActivityWithMeta()
    {
        try
        {
            isSaving = true;
            await InvokeAsync(StateHasChanged);
            var dto = new CreateUserActivityDto
            {
                Title = activityTitle,
                Description = activityDescription,
                ActivityId = selectedActivity.Id,
                DateStart = startTime,
                DateEnd = DateTime.UtcNow,
                Route = route.Select(loc => new GeoPointDto
                {
                    Latitude = loc.Latitude,
                    Longitude = loc.Longitude,
                    Timestamp = loc.Timestamp.UtcDateTime,
                }).ToList(),
                ElevationGain = (int)Math.Round(elevation),
                Distance = Distance,
                HrData = HrData,
                SpeedData = SpeedData,
                ElevationData = ElevationData,
                CaloriesBurned = (int)Math.Round(CaloriesBurned),
                SensorName = sensor.Name ?? null
            };

            await ActivityService.AddActivityAsync(dto);
            await JSRuntime.InvokeVoidAsync("clearRoute");

            showFinishModal = false;
            isPaused = false;
            Distance = 0;
            Duration = TimeSpan.Zero;
            Speed = 0;
            route.Clear();

            StopCompass();

            Navigation.NavigateTo("/feed");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Save activity failed: " + ex.Message);
            // Optionally show an error message to the user
            await JSRuntime.InvokeVoidAsync("alert", "Failed to save activity. Please try again.");
        }
        finally
        {
            isSaving = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void StartCompass()
    {
        if (!Compass.Default.IsSupported)
        {
            return;
        }

        if (!Compass.IsMonitoring)
        {
            Compass.Default.ReadingChanged += OnCompassReadingChanged;
            Compass.Default.Start(SensorSpeed.UI);
        }
    }

    private void StopCompass()
    {
        if (!Compass.Default.IsSupported)
        {
            return;
        }
        if (Compass.IsMonitoring)
        {
            Compass.Default.Stop();
            Compass.Default.ReadingChanged -= OnCompassReadingChanged;
        }
    }

    private void OnCompassReadingChanged(object sender, CompassChangedEventArgs e)
    {
        if (!mapInitialized)
        {
            return;
        }
        currentHeading = e.Reading.HeadingMagneticNorth;

        try
        {
            if (!AppStateService.IsInBackground)
            {
                _ = JSRuntime.InvokeVoidAsync("updateMarker", currentHeading);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("JS compass update failed: " + ex.Message);
        }
    }


    public void Dispose()
    {
        try
        {
            StopCompass();
            ActivityTrackingService.LocationUpdated -= OnPositionChangedSync;
            ActivityTrackingService.StopAsync();

            mapInitialized = false;
            durationCts?.Cancel();
            durationCts?.Dispose();
        }
        catch
        {
            
        }
    }

    private string GetSpeedOrPace()
    {
        const double minMovementThreshold = 0.5; // m/s below which we consider "not moving"

        if (Speed < minMovementThreshold)
        {
            return selectedActivity.MeasurementType == "pace" ? "0:00 min/km" : "0.00 km/h";
        }

        if (selectedActivity.MeasurementType == "pace")
        {
            // Convert m/s to pace (min/km)
            double paceInMinPerKm = 1000.0 / Speed / 60.0;

            // Extract total seconds
            int totalSeconds = (int)Math.Round(paceInMinPerKm * 60);

            // Round to nearest 5 seconds
            int roundedSeconds = (int)(Math.Round(totalSeconds / 5.0) * 5);

            int minutes = roundedSeconds / 60;
            int seconds = roundedSeconds % 60;

            return $"{minutes}:{seconds:D2} min/km";
        }
        else
        {
            // Convert m/s to km/h
            double speedInKmH = Speed * 3.6;
            return $"{speedInKmH:F2} km/h";
        }
    }

    private async Task InitializeMap(Location location)
    {
        if (!mapInitialized && location is not null)
        {          
            await InvokeAsync(StateHasChanged);
            try
            {
                mapVisible = true;
                isLoadingLocation = false;
                await InvokeAsync(StateHasChanged);
                await JSRuntime.InvokeVoidAsync("initializeMap", location.Latitude, location.Longitude, mapToken);
                mapInitialized = true;
            }
            catch (Exception ex)
            {
                mapVisible = false;
                Console.WriteLine("JS init map failed: " + ex.Message);
            }
            finally
            {
                isLoadingLocation = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private string GetSpeedOrPaceLabel()
    {
        return selectedActivity.MeasurementType == "pace" ? "Pace" : "Speed";
    }
}

