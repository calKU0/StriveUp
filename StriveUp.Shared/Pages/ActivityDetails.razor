@page "/activity/{activityId:int}"
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.Helpers
@using System.Security.Claims
@using StriveUp.Shared.DTOs.Activity

@inject IJSRuntime JS
@inject IActivityService ActivityService
@inject INotificationService NotificationService
@inject ICustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation


<div class="container-fluid container-md px-0 px-md-4 my-4">
    @if (isLoading)
    {
        <Spinner text="Loading details. Please wait..."></Spinner>
    }
    else
    {
        <div class="card border-0 shadow rounded-md-4 rounded-0 overflow-hidden w-100">
            <!-- Header -->
            <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center p-4">
                <div class="d-flex align-items-center gap-3">
                    <img src="@activity.UserAvatar" class="rounded-circle" width="60" height="60" alt="User" />
                    <div>
                        <h5 class="mb-0">@activity.UserName</h5>
                        <small>@activity.DateStart.ToLongDateString()</small>
                    </div>
                </div>
                <span class="badge bg-primary fs-6">@activity.ActivityName</span>
            </div>

            <!-- Route Map -->
            @if (activity.Route?.Count > 1)
            {
                <div class="mb-4">
                    <MapRoute Route="activity.Route" Height="300px" IsInteractive=true Style="border-bottom-left-radius: 24px;border-bottom-right-radius: 24px;"/>
                </div>
            }

            <div class="card-body p-4">
                <!-- Title and Description -->
                <div class="mb-4">
                    <h3 class="fw-bold">@activity.Title</h3>
                    <p class="text-muted">@activity.Description</p>
                </div>

                <!-- Metrics -->
                <div class="row text-center g-3 mb-4">
                    <div class="col-6 col-md-3">
                        <div class="p-3 border rounded-3">
                            <i class="bi bi-clock fs-3 text-primary"></i>
                            <h5 class="mt-2">@TimeSpan.FromSeconds(activity.DurationSeconds).ToString(@"hh\:mm\:ss")</h5>
                            <small class="text-muted">Duration</small>
                        </div>
                    </div>
                    @if(activity.Distance > 0)
                    {
                        <div class="col-6 col-md-3">
                            <div class="p-3 border rounded-3">
                                <i class="bi bi-signpost-split fs-3 text-primary"></i>
                                <h5 class="mt-2">@(Math.Round(activity.Distance / 1000.0, 2)) km</h5>
                                <small class="text-muted">Distance</small>
                            </div>
                        </div>
                    }
                    <div class="col-6 col-md-3">
                        <div class="p-3 border rounded-3">
                            <i class="bi bi-fire fs-3 text-primary"></i>
                            <h5 class="mt-2">@activity.CaloriesBurned kcal</h5>
                            <small class="text-muted">Calories</small>
                        </div>
                    </div>
                    @if (activity.MaxHr > 0)
                    {
                        <div class="col-6 col-md-3">
                            <div class="p-3 border rounded-3">
                                <i class="bi bi-activity fs-3 text-success"></i>
                                <h5 class="mt-2">@activity.MaxHr bpm</h5>
                                <small class="text-muted">Max Heart Rate</small>
                            </div>
                        </div>
                    }
                    @if (activity.MaxSpeed > 0)
                    {
                        <div class="col-6 col-md-3">
                            <div class="p-3 border rounded-3">
                                <i class="bi bi-speedometer2 fs-3 text-success"></i>
                                <h5 class="mt-2">@ActivityUtils.GetSpeedOrPace(activity.MaxSpeed, activityConfig)</h5>
                                <small class="text-muted">Max @ActivityUtils.GetSpeedOrPaceLabel(activityConfig)</small>
                            </div>
                        </div>
                    }
                    @if (activity.AvarageHr > 0)
                    {
                        <div class="col-6 col-md-3">
                            <div class="p-3 border rounded-3">
                                <i class="bi bi-heart-pulse fs-3 text-info"></i>
                                <h5 class="mt-2">@activity.AvarageHr bpm</h5>
                                <small class="text-muted">Avg Heart Rate</small>
                            </div>
                        </div>
                    }
                    @if (activity.AvarageSpeed > 0)
                    {
                        <div class="col-6 col-md-3">
                            <div class="p-3 border rounded-3">
                                <i class="bi bi-speedometer2 fs-3 text-info"></i>
                                <h5 class="mt-2">@ActivityUtils.GetSpeedOrPace(activity.AvarageSpeed, activityConfig)</h5>
                                <small class="text-muted">Avg @ActivityUtils.GetSpeedOrPaceLabel(activityConfig)</small>
                            </div>
                        </div>
                    }
                    @if (activity.ElevationGain > 0)
                    {   
                        <div class="col-6 col-md-3">
                            <div class="p-3 border rounded-3">
                                <i class="bi bi-speedometer2 fs-3 text-info"></i>
                                <h5 class="mt-2">@activity.ElevationGain</h5>
                                <small class="text-muted">Elevation Gain</small>
                            </div>
                        </div>
                    }
                </div>

                <!-- Heart Rate Chart -->
                @if (activity.HrData?.Any() == true)
                {
                    <div class="mb-4">
                        <h5 class="text-primary">Heart Rate Over Time</h5>
                        <div style="position: relative; height: 300px;">
                            <canvas id="hrChart"></canvas>
                        </div>
                    </div>
                }

                <!-- Speed Chart -->
                @if (activity.SpeedData?.Any() == true)
                {
                    <div class="mb-4">
                        <h5 class="text-primary">Speed Over Time</h5>
                        <div style="position: relative; height: 300px;">
                            <canvas id="speedChart"></canvas>
                        </div>
                    </div>
                }

                <!-- Buttons -->
                <div class="d-flex gap-3 mt-3">
                    <button class="btn btn-outline-danger rounded-pill px-4 @(activity.IsLikedByCurrentUser ? "text-danger bg-danger-subtle like-active" : "text-body")" @onclick="ToggleLike">
                        <i class="bi bi-heart-fill me-2"></i>@activity.LikeCount
                    </button>
                    <a href="/activity/@activity.Id/comments" class="btn btn-outline-primary rounded-pill px-4">
                        <i class="bi bi-chat-dots-fill me-2"></i>Comments (@(activity.Comments?.Count ?? 0))
                    </a>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [Parameter] public int activityId { get; set; }
    private UserActivityDto activity = new();
    private ActivityDto activityConfig = new();
    private string userId = "";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = user.User;
            if (currentUser.Identity?.IsAuthenticated == false)
            {
                Navigation.NavigateTo("/login");
            }
            userId = user.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            activity = await ActivityService.GetActivityByIdAsync(activityId) ?? new();
            activityConfig = await ActivityService.GetActivityConfig(activity.ActivityId) ?? new();
            await RenderChartsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task RenderChartsAsync()
    {
        try
        {
            if (activity.HrData?.Any() == true)
            {
                var hrLabels = activity.HrData
                    .Select(d =>
                        TimeSpan.FromMilliseconds(d.TimeStamp.Subtract(activity.DateStart).TotalMilliseconds)
                            .ToString(@"hh\:mm\:ss"))
                    .ToArray();

                var hrValues = activity.HrData.Select(d => d.HearthRateValue).ToArray();

                await JS.InvokeVoidAsync("renderLineChartById", "hrChart", hrLabels, hrValues, "Heart Rate (bpm)");
            }

            if (activity.SpeedData?.Any() == true)
            {
                var speedLabels = activity.SpeedData
                    .Select(d =>
                        TimeSpan.FromMilliseconds(d.TimeStamp.Subtract(activity.DateStart).TotalMilliseconds)
                            .ToString(@"hh\:mm\:ss"))
                    .ToArray();

                // Convert speed (m/s) to pace (min/km) in seconds as double
                var paceValues = activity.SpeedData
                    .Select(d => d.SpeedValue > 0 ? 1000.0 / d.SpeedValue : double.NaN)
                    .Where(p => !double.IsNaN(p) && !double.IsInfinity(p))
                    .ToArray();

                await JS.InvokeVoidAsync("renderLineChartById", "speedChart", speedLabels, paceValues, "Pace (min/km)");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering charts: {ex}");
        }
    }


    private async Task ToggleLike()
    {
        try
        {
            await ActivityUtils.ToggleLikeAsync(
                activity,
                userId,
                ActivityService,
                NotificationService
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Like toggle error: {ex.Message}");
        }
    }
}
