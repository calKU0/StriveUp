@page "/profile/edit"
@using System.Drawing
@using StriveUp.Shared.DTOs.Profile
@using System.Security.Claims
@inject IProfileService ProfileService
@inject NavigationManager Navigation
@inject ICustomAuthStateProvider AuthStateProvider
@inject IJSRuntime JS

<div class="container text-center d-flex justify-content-center align-items-center">
    <EditForm Model="@editModel" OnValidSubmit="HandleValidSubmit">
        <h2 class="fw-bold">Edit Your Profile</h2>
        <p class="text-muted mb-4">Update your personal information</p>

        <InputFile id="fileInput" style="display:none;" OnChange="HandleFileChange" accept="image/*" />

        <img @onclick="TriggerFileInputClick"
        src="@GetAvatarUrl()"
        class="rounded-circle mb-4 avatar-image"
        style="width: 150px; height: 150px; cursor: pointer;"
        title="Click to change avatar" />
        <div class="row register-form-row justify-content-center g-3 pb-3">
            <div class="form-floating col-6 mx-auto">
                <InputText id="firstName" class="form-control" @bind-Value="editModel.FirstName" placeholder="First Name" />
                <label for="firstName">First Name</label>
            </div>

            <div class="form-floating col-6 mx-auto">
                <InputText id="lastName" class="form-control" @bind-Value="editModel.LastName" placeholder="Last Name" />
                <label for="lastName">Last Name</label>
            </div>

            <div class="form-floating col-6 mx-auto">
                <InputText id="userName" class="form-control" @bind-Value="editModel.UserName" placeholder="Username" />
                <label for="userName">Username</label>
            </div>

            <!-- Gender -->
            <div class="form-floating col-6">
                <InputSelect id="gender" class="form-control" @bind-Value="editModel.Gender">
                    <option value="">Select Gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Other">Other</option>
                </InputSelect>
                <label for="gender">Gender</label>
            </div>

            <!-- Bio -->
            <div class="form-floating col-12">
                <InputTextArea id="bio" class="form-control" @bind-Value="editModel.Bio" placeholder="Bio" />
                <label for="bio">Bio</label>
            </div>

            <!-- Birthday -->
            <div class="form-floating col-6">
                <InputDate id="birthday" class="form-control" @bind-Value="editModel.Birthday" />
                <label for="birthday">Birthday</label>
            </div>

            <!-- Country -->
            <div class="form-floating col-6">
                <InputText id="country" class="form-control" @bind-Value="editModel.Country" placeholder="Country" />
                <label for="country">Country</label>
            </div>

            <!-- State -->
            <div class="form-floating col-6">
                <InputText id="state" class="form-control" @bind-Value="editModel.State" placeholder="State" />
                <label for="state">State</label>
            </div>

            <!-- City -->
            <div class="form-floating col-6">
                <InputText id="city" class="form-control" @bind-Value="editModel.City" placeholder="City" />
                <label for="city">City</label>
            </div>
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success col-12 col-md-6 mx-auto">@successMessage</div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger col-12 col-md-6 mx-auto">@errorMessage</div>
        }

        <button type="submit" class="btn btn-lg btn-warning rounded-3 col-12 col-md-6 mb-3">Save</button>
        <button type="button" class="btn btn-outline-secondary rounded-3 col-12 col-md-6" @onclick="CancelEdit">Cancel</button>
    </EditForm>
</div>

@code {
    private string? imageDataUrl;
    private string? croppedImageUrl;
    private EditUserProfileDto editModel = new();
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity?.IsAuthenticated ?? false)
                {
                    var userName = user.Identity.Name;
                    var (success, error, profile) = await ProfileService.GetProfile(userName);

                    if (success && profile != null)
                    {
                        editModel = new EditUserProfileDto
                        {
                            UserName = profile.UserName,
                            FirstName = profile.FirstName,
                            LastName = profile.LastName,
                            Avatar = profile.Avatar ?? string.Empty,
                            Bio = profile.Bio,
                            Gender = profile.Gender,
                            Birthday = profile.Birthday,
                            Country = profile.Country,
                            State = profile.State,
                            City = profile.City
                        };
                    }
                    else
                    {
                        errorMessage = error?.Message ?? "Failed to load user profile.";
                    }
                }
                else
                {
                    errorMessage = "Unauthorized";
                }

            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
            }
        }
    }

    private async Task TriggerFileInputClick()
    {
        await JS.InvokeVoidAsync("triggerFileInputClick");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var (success, error) = await ProfileService.EditProfile(editModel);

            if (success)
            {
                successMessage = "Profile updated successfully!";
                errorMessage = null;

                // Redirect after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/profile");
            }
            else
            {
                successMessage = null;
                errorMessage = error?.Message ?? "An error occurred while updating your profile.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            successMessage = null;
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/profile");
    }

    private string GetAvatarUrl()
    {
        return !string.IsNullOrWhiteSpace(croppedImageUrl)
            ? croppedImageUrl
            : string.IsNullOrWhiteSpace(editModel.Avatar)
                ? "https://via.placeholder.com/100"
                : editModel.Avatar;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            await using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            var buffer = new byte[file.Size];

            var bytesRead = 0;
            while (bytesRead < file.Size)
            {
                bytesRead += await stream.ReadAsync(buffer.AsMemory(bytesRead));
            }

            var base64Data = Convert.ToBase64String(buffer);
            imageDataUrl = $"data:{file.ContentType};base64,{base64Data}";

            await ResizeAndCropImageAsync(imageDataUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task ResizeAndCropImageAsync(string imageDataUrl)
    {
        try
        {
            var base64Data = imageDataUrl.Substring(imageDataUrl.IndexOf(',') + 1);
            var imageBytes = Convert.FromBase64String(base64Data);

            // Load image into a MemoryStream
            using var ms = new System.IO.MemoryStream(imageBytes);
            using var originalImage = Image.FromStream(ms);

            // Define target size (256x256)
            var targetWidth = 256;
            var targetHeight = 256;

            // Calculate the aspect ratio of the original image
            var aspectRatio = (double)originalImage.Width / originalImage.Height;

            int newWidth, newHeight;

            // Resize the image to fit within the target size while maintaining aspect ratio
            if (originalImage.Width > originalImage.Height)
            {
                newWidth = targetWidth;
                newHeight = (int)(targetWidth / aspectRatio);
            }
            else if (originalImage.Width < originalImage.Height)
            {
                newHeight = targetHeight;
                newWidth = (int)(targetHeight * aspectRatio);
            }
            else
            {
                newWidth = targetWidth;
                newHeight = targetHeight;
            }

            // Create a new Bitmap for the resized image
            var resizedImage = new Bitmap(newWidth, newHeight);

            using (var g = Graphics.FromImage(resizedImage))
            {
                // Set high quality rendering options
                g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                g.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;

                // Draw the resized image
                g.DrawImage(originalImage, 0, 0, newWidth, newHeight);
            }

            // Now crop if necessary to the exact target size
            int xOffset = 0, yOffset = 0;
            if (newWidth > targetWidth)
            {
                xOffset = (newWidth - targetWidth) / 2;
            }
            if (newHeight > targetHeight)
            {
                yOffset = (newHeight - targetHeight) / 2;
            }

            // Create a final bitmap to hold the cropped image
            var finalImage = new Bitmap(targetWidth, targetHeight);

            using (var g = Graphics.FromImage(finalImage))
            {
                g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                g.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;

                // Crop from the center to get the target size
                g.DrawImage(resizedImage, 0, 0, new Rectangle(xOffset, yOffset, targetWidth, targetHeight), GraphicsUnit.Pixel);
            }

            // Save the final cropped and resized image into a memory stream in PNG format
            using var croppedMs = new System.IO.MemoryStream();
            finalImage.Save(croppedMs, System.Drawing.Imaging.ImageFormat.Png);

            // Convert the final image to a base64 string
            var croppedBase64 = Convert.ToBase64String(croppedMs.ToArray());

            // Update the croppedImageUrl to show the result in the UI
            croppedImageUrl = $"data:image/png;base64,{croppedBase64}";

            editModel.Avatar = croppedImageUrl;

            // Notify the UI to update
            StateHasChanged();

            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

}
