@page "/medals"
@using StriveUp.Shared.Components
@using StriveUp.Shared.DTOs
@inject IMedalsService MedalService
@inject IActivityService ActivityService
@inject NavigationManager Navigation

<div class="container my-4">

    <h2 class="text-center mb-4">Medals</h2>

    @if (showFilters)
    {
        <!-- Tabs for Frequency -->
        <ul class="nav nav-tabs mb-4" id="medalFrequencyTabs" role="tablist">
            <li class="nav-item">
                <button class="nav-link @(activeFrequencyTab == "all" ? "active" : "")" @onclick="@(() => SetFrequencyTab("all"))">
                    All
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(activeFrequencyTab == "once" ? "active" : "")" @onclick="@(() => SetFrequencyTab("once"))">
                    Once
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(activeFrequencyTab == "weekly" ? "active" : "")" @onclick="@(() => SetFrequencyTab("weekly"))">
                    Weekly
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(activeFrequencyTab == "monthly" ? "active" : "")" @onclick="@(() => SetFrequencyTab("monthly"))">
                    Monthly
                </button>
            </li>
        </ul>

        <!-- Tabs for Status -->
        <ul class="nav nav-tabs mb-4" id="medalStatusTabs" role="tablist">
            <li class="nav-item">
                <button class="nav-link @(statusFilter == "all" ? "active" : "")" @onclick="@(() => SetStatusFilter("all"))">
                    All
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(statusFilter == "achieved" ? "active" : "")" @onclick="@(() => SetStatusFilter("achieved"))">
                    Achieved
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(statusFilter == "notachieved" ? "active" : "")" @onclick="@(() => SetStatusFilter("notachieved"))">
                    Not Achieved
                </button>
            </li>
        </ul>

        <!-- Dropdown for Order -->
        <div class="mb-3">
            <button class="btn btn-outline-secondary" @onclick="CycleOrder">
                <i class="fas fa-sort"></i> @GetOrderLabel()
            </button>
        </div>
    }
    <!-- Toggle Button for Filters -->
    <div class="text-end mb-3">
        <button class="btn btn-sm btn-outline-primary" @onclick="ToggleFilters">
            <i class="fas @(showFilters ? "fa-eye-slash" : "fa-sliders-h")"></i>
            Filters
        </button>
    </div>


    <!-- Medals Display Section -->
    <div class="row">
        <div class="col">
            <!-- Medal Display -->
            <div class="row g-3">
                @if (FilteredMedals != null)
                {
                    @foreach (var medal in FilteredMedals)
                    {
                        <div class="col-6 col-sm-4 col-md-2">
                            <MedalCard MedalDto="@medal"
                            IsAchieved="@achievedMedals.Any(a => a.Id == medal.Id)"
                            OnMedalClick="@(() => ShowMedalDetails(medal))"
                            ProgressPercent="@(medalProgress.TryGetValue(medal.Id, out var progress) ? progress : 0)" />
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>
@if (@selectedMedal != null)
{
    <MedalDetailsModal Medal="@selectedMedal" MedalProgress="medalProgress[selectedMedal.Id]" IsVisible="@isMedalModalVisible" IsVisibleChanged="@(v => isMedalModalVisible = v)" />
}
@code {
    private List<MedalDto> achievedMedals = new();
    private List<MedalDto> notAchievedMedals = new();
    private Dictionary<int, int> medalProgress = new();
    private MedalDto selectedMedal;
    private bool isMedalModalVisible = false;
    private string activeFrequencyTab = "all";
    private string statusFilter = "all";
    private string selectedOrder = "name";
    private bool showFilters = false;
    private List<MedalDto> FilteredMedals => GetFilteredMedals() ?? new List<MedalDto>();

    protected override async Task OnInitializedAsync()
    {
        var allMedals = await MedalService.GetAllMedalsAsync();
        var userMedals = await MedalService.GetUserMedalsAsync();

        achievedMedals = userMedals ?? new();
        var achievedIds = achievedMedals.Select(m => m.Id).ToHashSet();

        notAchievedMedals = (allMedals ?? new())
            .Where(m => !achievedIds.Contains(m.Id))
            .ToList();

        var activities = await ActivityService.GetFeedAsync();
        medalProgress.Clear();

        foreach (var medal in allMedals)
        {
            int progress = CalculateMedalProgress(medal, activities);
            medalProgress[medal.Id] = progress;
        }

    }

    private void CycleOrder()
    {
        selectedOrder = selectedOrder switch
        {
            "name" => "date",
            "date" => "frequency",
            _ => "name"
        };
    }

    private string GetOrderLabel()
    {
        return selectedOrder switch
        {
            "name" => "Name",
            "date" => "Date",
            "frequency" => "Frequency",
            _ => "Order"
        };
    }

    private void ShowMedalDetails(MedalDto medal)
    {
        selectedMedal = medal;
        isMedalModalVisible = true;
    }

    private void ToggleFilters()
    {
        showFilters = !showFilters;
    }

    private void SetFrequencyTab(string frequency) => activeFrequencyTab = frequency;
    private void SetStatusFilter(string status) => statusFilter = status;

    private List<MedalDto> GetFilteredMedals()
    {
        // Combine achieved/not achieved based on status
        var baseList = statusFilter switch
        {
            "achieved" => achievedMedals,
            "notachieved" => notAchievedMedals,
            _ => achievedMedals.Concat(notAchievedMedals).ToList()
        };

        // Apply frequency filter
        var freqFiltered = activeFrequencyTab switch
        {
            "once" => baseList.Where(m => m.Frequency == "Once"),
            "weekly" => baseList.Where(m => m.Frequency == "Weekly"),
            "monthly" => baseList.Where(m => m.Frequency == "Monthly"),
            _ => baseList
        };

        // Apply ordering
        return selectedOrder switch
        {
            "name" => freqFiltered.OrderBy(m => m.Name).ToList(),
            "frequency" => freqFiltered.OrderBy(m => m.Frequency).ToList(),
            _ => freqFiltered.ToList()
        };
    }

    private int CalculateMedalProgress(MedalDto medal, List<UserActivityDto> activities)
    {
        if (medal.ActivityId == 0 || medal.TargetValue <= 0)
            return 0;

        double totalDistance = 0;

        switch (medal.Frequency)
        {
            case "Weekly":
                // Weekly progress calculation
                {
                    var today = DateTime.Today;
                    var startOfWeek = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);
                    var endOfWeek = startOfWeek.AddDays(7).AddSeconds(-1);

                    totalDistance = activities
                        .Where(a => a.ActivityId == medal.ActivityId && a.DateStart >= startOfWeek && a.DateStart <= endOfWeek)
                        .Sum(a => a.Distance);
                    break;
                }
            case "Once":
                // Once progress calculation
                totalDistance = activities
                    .Where(a => a.ActivityId == medal.ActivityId)
                    .Sum(a => a.Distance);
                break;
            case "Monthly":
                // Placeholder for monthly logic, can be customized later
                totalDistance = 0;
                break;
            default:
                return 0;
        }

        // Calculate progress as percentage, for "Once" medals, you accumulate the total distance.
        double progress = (totalDistance / medal.TargetValue) * 100;
        return Math.Min(100, (int)Math.Round(progress));
    }

}
