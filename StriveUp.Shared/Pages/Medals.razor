@page "/medals"

<!-- Usings -->
@using StriveUp.Shared.Helpers

<!-- Injections -->
@inject IMedalService MedalService
@inject ICustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="container my-5">

    <h2 class="text-center mb-4 mt-5">Medals</h2>

    @if (isLoading)
    {
        <Spinner text="Loading medals..."></Spinner>
    }
    else
    {
        @if (showFilters)
        {
            <!-- Tabs for Frequency -->
            <ul class="nav nav-tabs mb-4" id="medalFrequencyTabs" role="tablist">
                <li class="nav-item">
                    <button class="nav-link @(activeFrequencyTab == "all" ? "active" : "")" @onclick="@(() => SetFrequencyTab("all"))">All</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeFrequencyTab == "once" ? "active" : "")" @onclick="@(() => SetFrequencyTab("once"))">Once</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeFrequencyTab == "weekly" ? "active" : "")" @onclick="@(() => SetFrequencyTab("weekly"))">Weekly</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeFrequencyTab == "monthly" ? "active" : "")" @onclick="@(() => SetFrequencyTab("monthly"))">Monthly</button>
                </li>
            </ul>

            <!-- Tabs for Status -->
            <ul class="nav nav-tabs mb-4" id="medalStatusTabs" role="tablist">
                <li class="nav-item">
                    <button class="nav-link @(statusFilter == "all" ? "active" : "")" @onclick="@(() => SetStatusFilter("all"))">All</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(statusFilter == "achieved" ? "active" : "")" @onclick="@(() => SetStatusFilter("achieved"))">Achieved</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(statusFilter == "notachieved" ? "active" : "")" @onclick="@(() => SetStatusFilter("notachieved"))">Not Achieved</button>
                </li>
            </ul>

            <!-- Dropdown for Order -->
            <div class="mb-3">
                <button class="btn btn-outline-secondary" @onclick="CycleOrder">
                    <i class="fas fa-sort"></i> @GetOrderLabel()
                </button>
            </div>
        }

        <!-- Toggle Button for Filters -->
        <div class="text-end mb-3">
            <button class="btn btn-sm btn-outline-primary" @onclick="ToggleFilters">
                <i class="fas @(showFilters ? "fa-eye-slash" : "fa-sliders-h")"></i>
                Filters
            </button>
        </div>

        <!-- Medals Display Section -->
        <div class="row g-3">
            @if (FilteredMedals.Any())
            {
                @for (int i = 0; i < FilteredMedals.Count; i++)
                {
                    var medal = FilteredMedals[i];
                    <div class="col-6 col-sm-4 col-md-2 d-flex">
                        <MedalCard @key="medal.Id"
                                   MedalDto="@medal"
                                   IsAchieved="IsMedalAchieved(medal)"
                                   OnMedalClick="@(() => ShowMedalDetails(medal))" />
                    </div>
                }
            }
        </div>

    }
</div>

@if (selectedMedal != null)
{
    <MedalDetailsModal Medal="@selectedMedal"
                       IsVisible="@isMedalModalVisible"
                       IsVisibleChanged="@(v => isMedalModalVisible = v)"
                       IsAchieved = "IsMedalAchieved(selectedMedal)"
                       OnModalClaim="v => OnModalClaim(v)" />
}

@code {
    private bool isLoading = true;
    private List<MedalDto> allMedals = new();
    private List<MedalDto> claimedMedals = new();
    private MedalDto selectedMedal;
    private bool isMedalModalVisible = false;
    private string activeFrequencyTab = "all";
    private string statusFilter = "all";
    private string selectedOrder = "% complete";
    private bool showFilters = false;

    private List<MedalDto> FilteredMedals => ApplyFilters();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated == false)
            {
                Navigation.NavigateTo("/login");
            }

            allMedals = await MedalService.GetAllMedalsAsync() ?? new();
            claimedMedals = await MedalService.GetUserMedalsAsync() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CycleOrder()
    {
        selectedOrder = selectedOrder switch
        {
            "name" => "date",
            "date" => "frequency",
            _ => "name"
        };
        StateHasChanged();
    }

    private string GetOrderLabel()
    {
        return selectedOrder switch
        {
            "name" => "Name",
            "date" => "Date",
            "frequency" => "Frequency",
            _ => "Order"
        };
    }

    private void ShowMedalDetails(MedalDto medal)
    {
        Console.WriteLine($"Clicked Medal: {medal.Name}");
        selectedMedal = medal;
        isMedalModalVisible = true;
        StateHasChanged();
    }

    private void ToggleFilters()
    {
        showFilters = !showFilters;
    }

    private void SetFrequencyTab(string frequency)
    {
        activeFrequencyTab = frequency;
        StateHasChanged();
    }

    private void SetStatusFilter(string status)
    {
        statusFilter = status;
        StateHasChanged();
    }

    private List<MedalDto> ApplyFilters()
    {
        IEnumerable<MedalDto> medalsToFilter = allMedals;

        foreach (var medal in allMedals)
        {
            var claimed = claimedMedals.FirstOrDefault(cm => cm.Id == medal.Id);

            if (claimed != null)
            {
                medal.DateEarned = claimed.DateEarned;
                medal.TimesClaimed = claimed.TimesClaimed;
            }
        }

        // Apply Status Filter
        if (statusFilter != "all")
        {
            medalsToFilter = statusFilter == "achieved"
                ? medalsToFilter.Where(m => claimedMedals.Contains(m))
                : medalsToFilter.Where(m => !claimedMedals.Contains(m));
        }

        // Apply Frequency Filter
        if (activeFrequencyTab != "all")
        {
            medalsToFilter = medalsToFilter.Where(m => m.Frequency.Equals(activeFrequencyTab, StringComparison.OrdinalIgnoreCase));
        }

        // Apply Ordering
        switch (selectedOrder)
        {
            case "name":
                medalsToFilter = medalsToFilter.OrderBy(m => m.Name);
                break;
            case "date":
                medalsToFilter = medalsToFilter.OrderBy(m => m.DateEarned);
                break;
            case "frequency":
                medalsToFilter = medalsToFilter.OrderBy(m => m.Frequency);
                break;
            case "% complete":
                medalsToFilter = medalsToFilter
                    .OrderByDescending(m => 
                        m.ProgressPercent == 100 && 
                        !IsMedalAchieved(m)) // Claimable first
                    .ThenByDescending(m => m.ProgressPercent) // Highest progress next
                    .ThenBy(m => m.Name); // Optional: tie-breaker
                break;
        }

        return medalsToFilter.ToList();
    }

    private void OnModalClaim(int medalId)
    {
        var claimedMedal = allMedals.FirstOrDefault(m => m.Id == medalId);
        if (claimedMedal == null) return;

        claimedMedal.DateEarned = DateTime.UtcNow;

        // Replace or add in claimedMedals list
        var index = claimedMedals.FindIndex(m => m.Id == medalId);
        if (index >= 0)
        {
            claimedMedals[index] = claimedMedal;
        }
        else
        {
            claimedMedals.Add(claimedMedal);
        }

        selectedMedal = claimedMedal; // make sure modal sees updated data
        StateHasChanged();
    }

    private bool IsMedalAchieved(MedalDto medal)
    {
        var claimed = claimedMedals.FirstOrDefault(m => m.Id == medal.Id);
        if (claimed == null) return false;
        var earnedDate = claimed.DateEarned ?? DateTime.MinValue;
        return medal.Frequency switch
        {
            "Weekly" => earnedDate >= DateUtils.GetStartOfWeek(DateTime.UtcNow),
            "Monthly" => earnedDate >= new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1),
            _ => true // Once or others are always claimed once
        };
    }
}
