@page "/activity/{ActivityId:int}/comments"

<!-- Usings -->
@using StriveUp.Shared.DTOs.Activity

<!-- Injections -->
@inject IActivityService ActivityService
@inject ICustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<PageTitle>Activity Comments</PageTitle>

@if (comments == null)
{
    <Spinner text="Loading Comments..."></Spinner>
}
else
{
    <div class="container py-4">
        <h5>@(comments?.Count ?? 0) Comments</h5>
        <hr />
        @if (comments?.Any() ?? false)
        {
            foreach (var comment in comments)
            {
                <div class="mb-3 border-bottom pb-2">
                    <strong>@comment.UserName</strong>
                    <div class="text-muted small">@comment.CreatedAt.ToShortDateString()</div>
                    <p>@comment.Content</p>
                </div>
            }
        }
        else
        {
            <p class="fst-italic text-muted">No comments yet.</p>
        }

        <div class="mt-4">
            <textarea class="form-control mb-2" rows="3" placeholder="Write your comment..." @bind="newComment"></textarea>
            <button class="btn btn-primary" @onclick="PostComment">Post Comment</button>
        </div>
    </div>
}


@code {
    [Parameter] public int ActivityId { get; set; }
    private List<ActivityCommentDto>? comments;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated == false)
            {
                Navigation.NavigateTo("/login");
            }
            comments = await ActivityService.GetActivityComments(ActivityId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private string newComment;

    private async Task PostComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment))
        {
            await ActivityService.AddCommentAsync(ActivityId, newComment);
            newComment = string.Empty;
            comments?.Add(new ActivityCommentDto
            {
                Content = newComment,
                CreatedAt = DateTime.UtcNow,
                UserName = "You"
            });
        }
    }
}