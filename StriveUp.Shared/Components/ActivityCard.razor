@using StriveUp.Shared.DTOs
@using System.Security.Claims
@inject IProfileService ProfileService
@inject IActivityService ActivityService
@inject INotificationService NotificationService
@inject ICustomAuthStateProvider AuthStateProvider

<div class="col-12 col-md-6 col-lg-4">
    <div class="card h-100 shadow rounded-4 border-0 bg-light-subtle transition hover-shadow">
        <div class="card-body d-flex flex-column gap-3 p-4">
            <!-- User Info -->
            <div class="d-flex align-items-center gap-3">
                <img src="@userAvatar" alt="User" width="48" height="48" class="rounded-circle img-fluid" />
                <div>
                    <div class="fw-bold fs-6">@Activity.UserName</div>
                    <div class="text-muted small">@Activity.DateStart.ToShortDateString()</div>
                </div>
            </div>

            <!-- Title & Description -->
            <div>
                <div class="fs-5 fw-semibold">@Activity.Title</div>
                <p class="text-muted mb-1">@Activity.Description</p>
            </div>

            <!-- Optional Map -->
            @if (Activity.Route?.Count > 1)
            {
                <MapRoute Route="Activity.Route" />
            }

            <!-- Stats Row -->
            <div class="d-flex justify-content-around text-center py-2 border-top border-bottom align-items-center">
                <div>
                    <span class="fw-semibold">@TimeSpan.FromSeconds(Activity.DurationSeconds).ToString(@"hh\:mm\:ss")</span><br />
                    <small class="text-muted">Duration</small>
                </div>
                <div>
                    <span class="fw-semibold">@Activity.CaloriesBurned</span><br />
                    <small class="text-muted">kcal</small>
                </div>
                <div>
                    <span class="fw-semibold">@Activity.Distance</span><br />
                    <small class="text-muted">km</small>
                </div>
                <div>
                    <img src="@GetActivityImageUrl(Activity.ActivityName, "dark")" alt="@Activity.ActivityName" style="width:26px" /><br />
                    <small class="text-muted">Type</small>
                </div>
            </div>

            <!-- Actions -->
            <div class="d-flex justify-content-between align-items-center mt-2">
                <button class="btn btn-sm px-3 @(Activity.IsLikedByCurrentUser ? "btn-danger" : "btn-outline-danger")"
                @onclick="() => ToggleLike(Activity)">
                    ❤️ @Activity.LikeCount
                </button>

                <a class="small text-primary text-decoration-none"
                href="@($"/activity/{Activity.Id}/comments")">
                    💬 @(Activity.Comments?.Count ?? 0) Comments
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public UserActivityDto Activity { get; set; }
    private Dictionary<int, string> commentInputs = new();
    private string userAvatar = "";
    private CreateNotificationDto notificationDto = new();
    private string userId = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await AuthStateProvider.GetAuthenticationStateAsync();
            userId = user.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            var result = await ProfileService.GetProfile(Activity.UserName);
            userAvatar = result.profile.Avatar;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching activities: {ex}");
        }
    }

    private async Task ToggleLike(UserActivityDto activity)
    {
        try
        {
            await ActivityService.LikeActivityAsync(activity.Id);

            if (userId != activity.UserId && activity.IsLikedByCurrentUser == false)
            {
                notificationDto = new CreateNotificationDto
                    {
                        UserId = activity.UserId,
                        Title = "New Like",
                        ActorId = userId,
                        Type = "like",
                        Message = "liked your activity",
                        RedirectUrl = $"/activity/{activity.Id}",
                    };
                await NotificationService.CreateNotificationAsync(notificationDto);
            }


            // Optimistically update UI
            if (activity.IsLikedByCurrentUser)
            {
                activity.LikeCount--;
            }
            else
            {
                activity.LikeCount++;
            }

            activity.IsLikedByCurrentUser = !activity.IsLikedByCurrentUser;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Like toggle error: {ex}");
        }
    }

    private string GetActivityImageUrl(string activityName, string theme)
    {
        return activityName switch
        {
            "Run" => $"images/icons/run-{theme}.webp",
            "Bike" => $"images/icons/bike-{theme}.webp",
            "Swim" => $"images/icons/swim-{theme}.webp",
            _ => $"images/icons/default.png"
        };
    }
}
