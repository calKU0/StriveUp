@using StriveUp.Shared.DTOs
@using System.Security.Claims
@using StriveUp.Shared.Helpers

@inject IActivityService ActivityService
@inject INotificationService NotificationService
@inject ICustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="col-12 col-md-6 col-lg-4" @onclick="OnCardClick">
    <div class="card h-100 shadow rounded-4 border-0 bg-light-subtle transition hover-shadow">
        <div class="card-body d-flex flex-column gap-3 p-4">
            <!-- User Info -->
            <div class="d-flex align-items-center gap-3">
                <img src="@Activity.UserAvatar" alt="User" width="48" height="48" class="rounded-circle img-fluid" />
                <div>
                    <div class="fw-bold fs-6">@Activity.UserName</div>
                    <div class="text-muted small">@Activity.DateStart.ToShortDateString()</div>
                </div>
            </div>

            <!-- Title & Description -->
            <div>
                <div class="fs-5 fw-semibold">@Activity.Title</div>
                <p class="text-muted mb-1">@Activity.Description</p>
            </div>

            <!-- Optional Map -->
            @if (Activity.Route?.Count > 1)
            {
                <MapRoute Route="Activity.Route" />
            }

            <!-- Stats Row -->
            <div class="d-flex justify-content-around text-center py-2 border-top border-bottom align-items-center">
                <div>
                    <span class="fw-semibold">@TimeSpan.FromSeconds(Activity.DurationSeconds).ToString(@"hh\:mm\:ss")</span><br />
                    <small class="text-muted">Duration</small>
                </div>
                <div>
                    <span class="fw-semibold">@Activity.CaloriesBurned</span><br />
                    <small class="text-muted">kcal</small>
                </div>
                @if (Activity.Distance > 0)
                {
                    <div>
                        <span class="fw-semibold">@(Math.Round(Activity.Distance / 1000.0, 2))</span><br />
                        <small class="text-muted">km</small>
                    </div>
                }
                <div>
                    <img src="@ActivityUtils.GetActivityImageUrl(Activity.ActivityName, "dark")" alt="@Activity.ActivityName" style="width:26px" /><br />
                    <small class="text-muted">Type</small>
                </div>
            </div>

            <!-- Actions -->
            <div class="d-flex justify-content-between align-items-center mt-3 px-1">
                <!-- Like Button -->
                <button class="btn btn-light like-button d-flex align-items-center gap-2 px-3 py-1 border rounded-pill shadow-sm
                   @(Activity.IsLikedByCurrentUser ? "text-danger bg-danger-subtle like-active" : "text-body")"
                        @onclick="() => ToggleLike()"
                        @onclick:stopPropagation="true">
                    <i class="bi bi-heart-fill @(Activity.IsLikedByCurrentUser ? "" : "text-muted")"></i>
                    <span class="fw-semibold">@Activity.LikeCount</span>
                </button>

                <!-- Comments Link -->
                <a href="@($"/activity/{Activity.Id}/comments")"
                @onclick:stopPropagation="true"
                class="comment-button d-flex align-items-center gap-2 text-decoration-none text-primary-emphasis small px-3 py-1 border rounded-pill bg-primary-subtle shadow-sm">
                    <i class="bi bi-chat-dots-fill"></i>
                    <span class="fw-semibold">@(Activity.Comments?.Count ?? 0)</span>
                    <span class="d-none d-sm-inline">Comments</span>
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public UserActivityDto Activity { get; set; }
    private Dictionary<int, string> commentInputs = new();
    private CreateNotificationDto notificationDto = new();
    private string userId = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await AuthStateProvider.GetAuthenticationStateAsync();
            userId = user.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching activities: {ex}");
        }
    }

    private async Task ToggleLike()
    {
        try
        {
            await ActivityUtils.ToggleLikeAsync(
                Activity,
                userId,
                ActivityService,
                NotificationService
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Like toggle error: {ex.Message}");
        }
    }

    private void OnCardClick()
    {
        Navigation.NavigateTo($"/activity/{Activity.Id}");
    }
}
