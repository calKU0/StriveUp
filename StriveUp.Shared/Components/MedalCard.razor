<!-- Usings -->
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.Layout

<!-- Injections -->
@inject IMedalService MedalsService;
@inject IMedalStateService MedalState
@inject IJSRuntime JS


<div class="medal-card h-100 d-flex flex-column @(IsAchieved || isClaimable ? "" : "opacity-50") @(isJustAchieved ? "claimed" : "")" @onclick="HandleClick">
    <div class="card-body d-flex flex-column">
        <img src="images/medals/@(Uri.EscapeDataString(MedalDto.Name.Replace(" ","_")).ToLower()).webp" loading="lazy" class="mx-auto mb-2" alt="@MedalDto.Name" />
        <h6 class="fw-bold">@MedalDto.Name</h6>
        <span class="badge @(GetBadgeClass(MedalDto.Frequency))">@MedalDto.Frequency</span>

        <!-- Make the footer auto-push to bottom -->
        <div class="medal-card-footer mt-auto">
            @if (ShowRedeemButton && !IsAchieved)
            {
                <button class="btn btn-primary btn-sm claim-animate mt-3"
                @onclick:stopPropagation="true"
                @onclick="ClaimMedal">
                    🎉 Claim
                </button>
            }
            else if (ShowProgressBar && !IsAchieved)
            {
                <div class="progress mt-2">
                    <div class="progress-bar @GetProgressGradientClass()"
                    role="progressbar"
                    style="width: @DisplayedProgress%"
                    aria-valuenow="@DisplayedProgress"
                    aria-valuemin="0"
                    aria-valuemax="100">
                    </div>
                </div>
                <div class="progress-text text-center mt-2">
                    <span>@AnimatedPercent% Completed</span>
                </div>
            }
            else
            {
                <div class="mt-1 text-muted small">Earned: @MedalDto.DateEarned?.ToShortDateString()</div>
            }
        </div>
    </div>
</div>


@code {
    [Parameter] public MedalDto MedalDto { get; set; }
    [Parameter] public bool IsAchieved { get; set; }
    [Parameter] public EventCallback OnMedalClick { get; set; }

    private bool isClaimable => MedalDto.ProgressPercent == 100;
    private int AnimatedPercent = 0;
    private int DisplayedProgress = 0;
    private bool ShowProgressBar = true;
    private bool ShowRedeemButton = false;
    private bool isJustAchieved = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DisplayedProgress = 0;
            AnimatedPercent = 0;
            StateHasChanged();

            await Task.Delay(100);

            DisplayedProgress = MedalDto.ProgressPercent;
            StateHasChanged();

            int duration = 1500;

            int delay = MedalDto.ProgressPercent > 0 ? duration / MedalDto.ProgressPercent : 0;
            while (AnimatedPercent < MedalDto.ProgressPercent)
            {
                AnimatedPercent++;
                StateHasChanged();
                await Task.Delay(delay);
            }

            if (MedalDto.ProgressPercent == 100)
            {
                await Task.Delay(100);
                ShowProgressBar = false;
                ShowRedeemButton = true;
                StateHasChanged();
            }
        }
    }

    private string GetProgressGradientClass()
    {
        if (MedalDto.ProgressPercent >= 100)
            return "progress-100";
        else if (MedalDto.ProgressPercent >= 75)
            return "progress-75";
        else if (MedalDto.ProgressPercent >= 50)
            return "progress-50";
        else if (MedalDto.ProgressPercent >= 25)
            return "progress-25";
        else
            return "progress-0";
    }


    private string GetBadgeClass(string frequency)
    {
        return frequency switch
        {
            "Once" => "bg-success",
            "Weekly" => "bg-primary",
            "Monthly" => "bg-danger",
            _ => "bg-secondary",
        };
    }

    private async Task HandleClick()
    {
        await OnMedalClick.InvokeAsync();
    }

    private async Task ClaimMedal()
    {
        var response = await MedalsService.ClaimMedal(MedalDto.Id);

        if (response)
        {
            ShowRedeemButton = false;
            await JS.InvokeVoidAsync("launchConfetti");

            IsAchieved = true;
            isJustAchieved = true;
            MedalDto.DateEarned = DateTime.Now;
            MedalState.DecrementMedalsCount();
            StateHasChanged();
        }
    }
}
