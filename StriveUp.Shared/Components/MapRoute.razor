@using StriveUp.Shared.DTOs
@using StriveUp.Shared.Helpers
@inject IJSRuntime JS
@inject ISecurableService securableService
@implements IDisposable

@if (IsInteractive)
{
    <div class="map-container" id="@mapId" style="height: @(Height); @Style" @onclick="OnMapClick" @onmouseout="OnMapMouseOut"></div>
}
else
{
    <img src="@MapboxUtils.GetStaticMapUrl(Route, token, 400, Convert.ToInt32(Height.Replace("px","")))" alt="Route preview" class="map-container" />
}

@code {
    [Parameter] public List<GeoPointDto> Route { get; set; } = new();
    [Parameter] public string Style { get; set; } = "border-radius: 12px;border-radius: 12px;";
    [Parameter] public string Height { get; set; } = "250px"; 
    [Parameter] public bool IsInteractive { get; set; } = false;

    private string mapId = $"map_{Guid.NewGuid().ToString().Replace("-", "")}";
    private IJSObjectReference? module;
    private IJSObjectReference? mapInstance;
    private string token;
    private string originalHeight;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Route.Count > 1)
        {
            token = await securableService.GetMapboxTokenAsync();
            
            if (IsInteractive)
            {
                module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/staticMap.js");
                mapInstance = await module.InvokeAsync<IJSObjectReference>("renderStaticRoute", mapId, Route, token, IsInteractive);
                originalHeight = Height;
            }
            StateHasChanged();
        }
    }

    // Triggered when the map is clicked to expand
    private async Task OnMapClick()
    {
        if (IsInteractive)
        {
            Height = "500px";
            StateHasChanged();

            if (mapInstance != null)
            {
                await module.InvokeVoidAsync("resizeMap", mapId);
            }
        }
    }

    private async Task OnMapMouseOut()
    {
        if (IsInteractive)
        {
            Height = originalHeight;
            StateHasChanged();

            if (mapInstance != null)
            {
                await module.InvokeVoidAsync("resizeMap", mapId);
            }
        }
    }

    public void Dispose()
    {
        _ = module?.DisposeAsync();
    }
}
