@using StriveUp.Shared.DTOs.Activity
@using StriveUp.Shared.Helpers
@inject IJSRuntime JSRuntime

<div class="form-control d-flex align-items-center justify-content-between"
     role="button"
     @onclick="ToggleDropdown">
    @if (SelectedActivity != null)
        {
    <div class="d-flex align-items-center">
        <img src="@ActivityUtils.GetActivityImageUrl(SelectedActivity.Name, "dark")"
             alt="icon"
             class="me-2"
             style="width: 30px; height: 30px;" />
        <span>@SelectedActivity.Name</span>
    </div>
        }
        else
    {
        <span class="text-muted">-- Select Activity --</span>
    }
    <span class="ms-auto">
        <i class="bi bi-chevron-down"></i>
    </span>
</div>

@if (dropdownOpen)
{
    <div class="custom-dropdown shadow rounded mt-1 p-2 bg-white border position-absolute w-100"
         style="z-index: 1000; max-height: 300px; overflow-y: auto;">
        @foreach (var activity in Activities)
        {
            <div class="d-flex align-items-center p-2 custom-option"
                 role="button"
                 @onclick="@(() => SelectActivity(activity))">
                <img src="@ActivityUtils.GetActivityImageUrl(activity.Name, "dark")"
                     class="me-2"
                     style="width: 30px; height: 30px;" />
                <span>@activity.Name</span>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public List<ActivityDto> Activities { get; set; }

    [Parameter]
    public ActivityDto SelectedActivity { get; set; }

    [Parameter]
    public EventCallback<ActivityDto> SelectedActivityChanged { get; set; }

    private bool dropdownOpen = false;

    private void ToggleDropdown()
    {
        dropdownOpen = !dropdownOpen;
    }

    private async Task SelectActivity(ActivityDto activity)
    {
        SelectedActivity = activity;
        dropdownOpen = false;
        await SelectedActivityChanged.InvokeAsync(activity);
    }
}
