<!-- Usings -->
@using StriveUp.Shared.Helpers

<!-- Injections -->
@inject IMedalService MedalsService;
@inject IMedalStateService MedalState
@inject IJSRuntime JS

@if (IsVisible)
{
    <div class="custom-modal-backdrop" @onclick="OnBackdropClick">
        <div class="custom-modal container p-3" @onclick:stopPropagation>
            <div class="custom-modal-header">
                <h5>@Medal.Name</h5>
                <button class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="text-center">
                <img src="images/medals/@(Uri.EscapeDataString(Medal.Name.Replace(" ","_")).ToLower()).webp" class="modal-image" alt="@Medal.Name" />
                <p class="text-muted text-center">@Medal.Description</p>

                <!-- Target Value and Frequency Section -->
                <div class="row g-2">
                    <div class="col-6">
                        <div class="card info-card border border-secondary">
                            <div class="card-body">
                                <span class="stat-icon"><i class="fas fa-route"></i></span>
                                <p><strong>Target</strong></p>
                                <p>@(Math.Round(Medal.TargetValue / 1000.0, 2)) km</p>
                            </div>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="card info-card border border-secondary">
                            <div class="card-body">
                                <span class="stat-icon"><i class="fas fa-trophy"></i></span>
                                <p><strong>To Earn</strong></p>
                                <p>@(Math.Round(Medal.DistanceToEarn / 1000.0, 2)) km</p>
                            </div>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="card info-card border border-secondary">
                            <div class="card-body">
                                <span class="stat-icon"><i class="fas fa-star"></i></span>
                                <p><strong>Exp</strong></p>
                                <p>@Medal.Points points</p>
                            </div>
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="card info-card border border-secondary">
                            <div class="card-body">
                                <span class="stat-icon"><i class="fas fa-redo-alt"></i></span>
                                <p><strong>Repeatable</strong></p>
                                <p>@(Medal.Frequency == "Once" ? "No" : Medal.Frequency)</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Progress Bar -->
            <div class="progress mt-3">
                <div class="progress-bar @MedalUtils.GetProgressGradientClass(Medal.ProgressPercent)"
                role="progressbar"
                style="width: @DisplayedProgress%"
                aria-valuenow="@DisplayedProgress"
                aria-valuemin="0"
                aria-valuemax="100">
                </div>
            </div>
            <div class="progress-text text-center mt-2">
                <span>@AnimatedPercent% Completed</span>
            </div>

            <div class="custom-modal-footer d-flex justify-content-md-end gap-3 justify-content-around">
                @if (!IsMedalCurrentlyAchieved() && Medal.ProgressPercent == 100)
                {
                    <button class="btn btn-primary claim-animate" @onclick="ClaimMedal">🎉 Claim Medal</button>
                }
                <button class="btn btn-secondary" @onclick="CloseModal">Close</button>
            </div>

        </div>
    </div>
}

@code {
    [Parameter] public MedalDto Medal { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsAchieved { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<int> OnModalClaim { get; set; }

    private int AnimatedPercent = 0;
    private int DisplayedProgress = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (DisplayedProgress == Medal.ProgressPercent)
        {
            // Skip animation if already at correct progress
            AnimatedPercent = Medal.ProgressPercent;
            return;
        }

        // Reset progress state for the new medal
        DisplayedProgress = 0;
        AnimatedPercent = 0;

        // Animate the progress bar
        await Task.Delay(100); // Short delay to trigger animation cleanly
        DisplayedProgress = Medal.ProgressPercent;
        StateHasChanged();

        int duration = 1500;
        int delay = Medal.ProgressPercent > 0 ? duration / Medal.ProgressPercent : 0;

        while (AnimatedPercent < Medal.ProgressPercent)
        {
            AnimatedPercent++;
            StateHasChanged();
            await Task.Delay(delay);
        }
    }

    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task OnBackdropClick()
    {
        await CloseModal();
    }

    private async Task ClaimMedal()
    {
        // Optimistically update UI first
        IsAchieved = true;
        Medal.DateEarned = DateTime.Now;
        Medal.TimesClaimed++;
        MedalState.DecrementMedalsCount();
        StateHasChanged();

        // Call the service, but do NOT await before updating UI
        var response = await MedalsService.ClaimMedal(Medal.Id);
        await JS.InvokeVoidAsync("launchConfetti");
        if (response)
        {
            await OnModalClaim.InvokeAsync(Medal.Id);
        }
        else
        {
            // Failure: rollback optimistic changes
            IsAchieved = false;
            Medal.DateEarned = null;
            Medal.TimesClaimed--;
            MedalState.IncrementMedalsCount();
            StateHasChanged();
        }
    }

    private bool IsMedalCurrentlyAchieved()
    {
        var earned = Medal.DateEarned ?? DateTime.MinValue;
        return Medal.Frequency switch
        {
            "Weekly" => earned >= DateUtils.GetStartOfWeek(DateTime.UtcNow),
            "Monthly" => earned >= new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1),
            _ => earned != DateTime.MinValue
        };
    }
}
