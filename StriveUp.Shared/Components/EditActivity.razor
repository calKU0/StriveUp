@page "/edit-activity"
@page "/edit-activity/{ActivityId:int?}"
@inject IActivityService ActivityService
@inject NavigationManager Navigation

@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Activity

<PageTitle>@(IsNew ? "Add Activity" : "Edit Activity")</PageTitle>

<h3>@(IsNew ? "Add New Activity" : "Edit Activity")</h3>

@if (loading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="activity" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Select Activity:</label>
            <select class="form-control" @bind="activity.ActivityId">
                @foreach (var activity in availableActivities)
                {
                    <option value="@activity.Id">@activity.Name</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="activity.Title" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="activity.Description" />
        </div>

        <div class="mb-3">
            <label for="dateStart" class="form-label">Date start</label>
            <InputDate id="dateStart" class="form-control" @bind-Value="activity.DateStart" />
        </div>

        <div class="mb-3">
            <label for="duration" class="form-label">Duration (minutes)</label>
            <InputNumber id="duration" class="form-control" @bind-Value="activity.DurationMinutes" />
        </div>

        <button type="submit" class="btn btn-success">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int? ActivityId { get; set; }

    private UserActivityDto activity = new();
    private List<ActivityDto> availableActivities = new();

    private bool IsNew => !ActivityId.HasValue;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableActivities = await ActivityService.GetAvailableActivitiesAsync() ?? new List<ActivityDto>();

            if (ActivityId.HasValue)
            {
                activity = await ActivityService.GetActivityByIdAsync(ActivityId.Value) ?? new UserActivityDto();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        loading = false;      
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            bool success = false;

            if (IsNew)
            {
                activity.DateEnd = activity.DateStart.AddMinutes(activity.DurationMinutes);
                //success = await ActivityService.AddActivityAsync(activity);
            }
            else
            {
                //success = await ActivityService.UpdateActivityAsync(ActivityId.Value, activity);
            }

            if (success)
            {
                Navigation.NavigateTo("/feed");
            }
            else
            {
                Console.WriteLine("Failed to save activity.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}