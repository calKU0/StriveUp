@inject IJSRuntime JSRuntime

<div class="native-header d-flex justify-content-between align-items-center px-3 py-2 @(isHeaderVisible ? "" : "hidden-header")">
    <!-- Left side: Back Button -->
    @if (showBackButton)
    {
        <div class="left-icons d-flex align-items-center">
            <i class="fas fa-arrow-left text-dark" @onclick="BackButtonClick"></i>
        </div>
    }

    <!-- Page Title -->
    <div class="page-title text-dark @(!showBackButton ? "" : "text-center")">
        @PageTitle
    </div>

    <!-- Right side: Search, Bell, Settings -->
    <div class="right-icons d-flex align-items-center">
        @if (showSearch)
        {
            <SearchIcon></SearchIcon>
        }
        @if (showBell)
        {
            <BellIcon></BellIcon>
        }
        @if (showSettings)
        {
            <a href="/settings">
                <i class="icon-header nav-link d-flex align-items-center justify-content-center fas fa-cog text-dark"></i>
            </a>
        }
    </div>
</div>

@code {
    [Parameter]
    public string PageTitle { get; set; } = "";

    private bool showBell = true;
    private bool showSearch = true;
    private bool showBackButton = false;
    private bool showSettings = false;

    private bool isHeaderVisible = true;
    private DotNetObjectReference<Header>? objRef;

    protected override async Task OnParametersSetAsync()
    {
        if (PageTitle == "Tracking" || PageTitle == "Comments" || PageTitle == "Search" || PageTitle == "Notifications" || PageTitle == "Settings")
        {
            showBell = false;
            showSearch = false;
            showBackButton = true;
            showSettings = false;
        }
        else
        {
            showBell = true;
            showSearch = true;
            showBackButton = false;
            showSettings = true;
        }
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("headerScrollHelper.init", objRef);
        }
    }

    [JSInvokable]
    public void SetHeaderVisibility(bool visible)
    {
        if (isHeaderVisible != visible)
        {
            isHeaderVisible = visible;
            StateHasChanged();
        }
    }

    private async Task BackButtonClick()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
