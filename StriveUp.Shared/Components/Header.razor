@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="native-header d-flex justify-content-between align-items-center px-3 py-2">
    <!-- Left side: Back Button -->
    @if (showBackButton)
    {
        <div class="left-icons d-flex align-items-center">
            <i class="fas fa-arrow-left text-dark" @onclick="BackButtonClick"></i>
        </div>
    }

    <!-- Page Title -->
    <div class="page-title text-dark @(!showBackButton ? "" : "text-center")">
        @pageTitle
    </div>

    <!-- Right side: Search, Bell, Settings -->
    <div class="right-icons d-flex align-items-center">
        @if (showSearch)
        {
            <SearchIcon></SearchIcon>
        }
        @if (showBell)
        {
            <BellIcon></BellIcon>
        }
        @if (showSettings)
        {
            <i class="fas fa-cog text-dark"></i>
        }
    </div>
</div>

@code {
    private string pageTitle = "";
    private bool showBell = true;
    private bool showSearch = true;
    private bool showBackButton = false;
    private bool showSettings = false;

    protected override async Task OnInitializedAsync()
    {
        pageTitle = GetPageName();
        if (pageTitle == "Tracking" || pageTitle == "Comments" || pageTitle == "Search" || pageTitle == "Settings")
        {
            showBell = false;
            showSearch = false;
            showBackButton = true;
            showSettings = false;
        }
        Navigation.LocationChanged += OnLocationChanged;
    }


    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (pageTitle == "Tracking" || pageTitle == "Comments" || pageTitle == "Search" || pageTitle == "Notifications" || pageTitle == "Settings")
        {
            showBell = false;
            showSearch = false;
            showBackButton = true;
            showSettings = false;
        }
        else
        {
            showBell = true;
            showSearch = true;
            showBackButton = false;
            showSettings = false;
        }

        pageTitle = GetPageName();
        StateHasChanged(); 
    }

    private async Task BackButtonClick()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private string GetPageName()
    {
        var uri = Navigation.Uri;
        var segments = new Uri(uri).Segments;
        var pageName = segments.LastOrDefault()?.TrimEnd('/');

        return CapitalizeFirstLetter(String.IsNullOrEmpty(pageName) ? "home" : pageName);
    }


    private string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        // Capitalize the first letter and keep the rest of the string unchanged
        return char.ToUpper(input[0]) + input.Substring(1).ToLower();
    }

    public void Dispose()
    {
        // Unsubscribe when the component is disposed to avoid memory leaks
        Navigation.LocationChanged -= OnLocationChanged;
    }
}