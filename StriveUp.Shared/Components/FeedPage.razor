<!-- Usings -->
@using StriveUp.Shared.DTOs

<!-- Injections -->
@inject IActivityService ActivityService
@inject NavigationManager Navigation
@inject ICustomAuthStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@implements IDisposable


<PageTitle>Activity Feed</PageTitle>
<div class="container d-flex flex-column justify-content-center pt-3">
    @if (isLoading && currentPage == 1)
    {
        <Spinner text="Loading feed. Please wait..."></Spinner>
    }
    else if (!isLoading && activities.Count == 0)
    {
        <!-- No activities CTA -->
        <div class="text-center py-5">
            <h4 class="mb-3 text-muted">Your activity feed is empty</h4>
            <p class="text-secondary">Start tracking your journey or log a past activity.</p>
            <div class="d-flex flex-column flex-md-row justify-content-center gap-3 mt-4">
                <a class="btn btn-outline-primary rounded-pill px-4 py-3" href="/tracking">
                    🚶 Start Tracking
                </a>
                <a class="btn btn-primary rounded-pill px-4 py-3" href="/add-activity">
                    ✍️ Add Manually
                </a>
            </div>
        </div>
    }
    else
    {
        <!-- Show activity feed -->
        <div class="row g-3">
            @foreach (var activity in activities)
            {
                <ActivityCard Activity="activity" />
            }
        </div>

        @if (isLoading && currentPage > 1)
        {
            <Spinner isSmall="true"></Spinner>
        }
        else if (hasMore)
        {
            <div @ref="sentinel" style="height: 1px;"></div>
        }
    }
</div>


@code {
    private List<UserActivityDto> activities = new();
    private bool isLoading = true;
    private string? errorMessage;
    private bool hasMore = true;
    private int currentPage = 1;
    private const int PageSize = 6;
    private bool observerInitialized = false;

    private ElementReference sentinel;
    private DotNetObjectReference<FeedPage>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated ?? false)
            {
                await LoadInitialActivities();
            }
            else
            {
                errorMessage = "You are not authenticated.";
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing feed: {ex}");
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task LoadInitialActivities()
    {
        var initial = await ActivityService.GetFeedAsync(currentPage, PageSize);

        if (initial != null)
        {
            activities.AddRange(initial);
            currentPage++;
            hasMore = initial.Count == PageSize;
        }
        else
        {
            Console.WriteLine("ActivityService.GetFeedAsync() returned null.");
            errorMessage = "Failed to load activities.";
        }

        isLoading = false;
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (hasMore && sentinel.Id != null && !observerInitialized)
        {
            try
            {
                dotNetRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("initIntersectionObserver", sentinel, dotNetRef);
                observerInitialized = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop error: {ex}");
                errorMessage = $"An error occurred: {ex.Message}";
            }
        }
    }


    [JSInvokable]
    public async Task LoadMoreActivities()
    {
        if (isLoading || !hasMore) return;

        isLoading = true;
        StateHasChanged();
        var more = await ActivityService.GetFeedAsync(currentPage, PageSize);

        if (more.Count < PageSize)
        {
            hasMore = false;
        }

        activities.AddRange(more);
        currentPage++;
        isLoading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}

