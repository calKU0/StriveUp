<!-- Usings -->
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Activity

<!-- Injections -->
@inject IActivityService ActivityService
@inject NavigationManager Navigation
@inject ICustomAuthStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@implements IDisposable


<PageTitle>Activity Feed</PageTitle>
<div class="container-fluid p-0 m-0">
    <div class="container-md px-0 py-0 px-md-4 py-2">
        @if (isLoading && currentPage == 1)
        {
            <Spinner text="Loading activities..."></Spinner>
        }
        else if (!isLoading && activities.Count == 0)
        {
            <!-- No activities CTA -->
            <div class="text-center py-5 px-3">
                <h4 class="mb-3 text-muted">Your activity feed is empty</h4>
                <p class="text-secondary">Start tracking your journey or log a past activity.</p>
                <div class="d-flex flex-column flex-md-row justify-content-center gap-3 mt-4">
                    <a class="btn btn-outline-primary rounded-pill px-4 py-2" href="/record">
                        🚶 Start Tracking
                    </a>
                    <a class="btn btn-primary rounded-pill px-4 py-2" href="/add-activity">
                        ✍️ Add Manually
                    </a>
                </div>
            </div>
        }
        else
        {
            <Goal />
            <div class="d-flex justify-content-between align-items-center mt-4 mb-3">
                <h4 class="fw-bold mb-0">📋 Your Feed</h4>
                <a href="/add-activity" class="btn btn-sm btn-primary mx-2">✛</a>
            </div>

            <!-- Activity Feed -->
            <div class="row g-3">
                @foreach (var activity in activities)
                {
                    <ActivityCard Activity="activity" />
                }
            </div>

            @if (isLoading && currentPage > 1)
            {
                <Spinner isSmall="true"></Spinner>
            }
            else if (hasMore)
            {
                <div @ref="sentinel" style="height: 1px;"></div>
            }
        }
    </div>
</div>


@code {
    private List<SimpleUserActivityDto> activities = new();
    private bool isLoading = true;
    private string? errorMessage;
    private bool hasMore = true;
    private int currentPage = 1;
    private const int PageSize = 6;

    private ElementReference sentinel;
    private DotNetObjectReference<FeedPage>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated ?? false)
            {
                
            }
            else
            {
                errorMessage = "You are not authenticated.";
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing feed: {ex}");
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task LoadInitialActivities()
    {
        var initial = await ActivityService.GetFeedAsync(currentPage, PageSize);

        if (initial != null)
        {
            activities.AddRange(initial);
            currentPage++;
            hasMore = initial.Count == PageSize;
        }
        else
        {
            Console.WriteLine("ActivityService.GetFeedAsync() returned null.");
            errorMessage = "Failed to load activities.";
        }

        isLoading = false;
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await LoadInitialActivities();

        if (hasMore && sentinel.Id != null)
        {
            try
            {
                dotNetRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("initIntersectionObserver", sentinel, dotNetRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop error: {ex}");
                errorMessage = $"An error occurred: {ex.Message}";
            }
        }
    }


    [JSInvokable]
    public async Task LoadMoreActivities()
    {
        Console.WriteLine($"LoadMoreActivities called. isLoading={isLoading} hasMore={hasMore} currentPage={currentPage}");
        if (isLoading || !hasMore) return;

        isLoading = true;
        StateHasChanged();

        var more = await ActivityService.GetFeedAsync(currentPage, PageSize);

        if (more == null || more.Count == 0)
        {
            hasMore = false;
        }
        else
        {
            activities.AddRange(more);
            currentPage++;

            hasMore = more.Count == PageSize;
        }

        isLoading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}

