@using Microsoft.Maui.ApplicationModel
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Activity

@inject IJSRuntime JSRuntime
@inject IBleHeartRateService BleHeartRateService

<div class="text-center my-3">
    @if (!IsTracking && !IsPaused)
    {
        <div class="mb-3 d-flex align-items-center justify-content-center gap-3">
            <img src="@GetActivityImageUrl(SelectedActivity?.Id ?? 4, "dark")"
                 alt="Activity Icon"
                 class="activity-image"
                 @onclick="() => ShowActivitySelect = true" />

            <i class="fas fa-heartbeat activity-icon" @onclick="() => ShowSensorSelect = true"></i>
        </div>

        <button class="btn btn-warning btn-lg" @onclick="OnStartClick">Start Activity</button>
    }
    else if (IsPaused)
    {
        <button class="btn btn-success me-2" @onclick="OnResumeClick">Resume</button>
        <button class="btn btn-danger" @onclick="OnFinishClick">Finish</button>
    }
    else
    {
        <button class="btn btn-danger btn-lg" @onclick="OnStopClick">Stop Activity</button>
    }
</div>

<GenericSelectModal TItem="ActivityDto"
                    Show="@ShowActivitySelect"
                    ShowChanged="@((bool val) => ShowActivitySelect = val)"
                    Label="Select an Activity"
                    Options="AvailableActivities"
                    SelectedValue="SelectedActivity"
                    SelectedValueChanged="OnActivitySelected"
                    GetLabel="GetActivityLabel"
                    GetValue="GetActivityValue"
                    GetIconUrl="GetActivityIconUrl">
</GenericSelectModal>

<GenericSelectModal TItem="BluetoothDeviceDto"
                    Show="@ShowSensorSelect"
                    ShowChanged="@((bool val) => ShowSensorSelect = val)"
                    Label="Select a Sensor"
                    Options="AvailableSensors"
                    SelectedValue="SelectedSensor"
                    SelectedValueChanged="OnSensorSelected"
                    GetLabel="GetSensorLabel"
                    GetValue="GetSensorValue">
</GenericSelectModal>


@code {
    [Parameter] public List<ActivityDto> AvailableActivities { get; set; } = new();
    [Parameter] public ActivityDto SelectedActivity { get; set; } = new();
    [Parameter] public bool IsTracking { get; set; }
    [Parameter] public bool IsPaused { get; set; }

    [Parameter] public EventCallback OnStartClick { get; set; }
    [Parameter] public EventCallback OnStopClick { get; set; }
    [Parameter] public EventCallback OnResumeClick { get; set; }
    [Parameter] public EventCallback OnFinishClick { get; set; }
    [Parameter] public EventCallback<BluetoothDeviceDto> OnSelectedSensorChanged { get; set; }
    [Parameter] public EventCallback<ActivityDto> SelectedActivityChanged { get; set; }

    private string SelectedSensorId { get; set; } = "";
    private BluetoothDeviceDto? SelectedSensor { get; set; }
    private List<BluetoothDeviceDto> AvailableSensors { get; set; } = new();
    private bool ShowActivitySelect { get; set; } = false;
    private bool ShowSensorSelect { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        // TO DO
        // Check for permissions only on list click

        var status = await Permissions.RequestAsync<Permissions.Bluetooth>();
        if (status != PermissionStatus.Granted)
        {
            return;
        }

        AvailableSensors = BleHeartRateService.GetAvailableDevicesAsync();

    }


    private string GetActivityImageUrl(int activityId, string theme)
    {
        var activity = AvailableActivities.FirstOrDefault(a => a.Id == activityId);

        return activity?.Name switch
        {
            "Run" => $"images/icons/run-{theme}.webp",
            "Bike" => $"images/icons/bike-{theme}.webp",
            "Swim" => $"images/icons/swim-{theme}.webp",
            _ => $"images/icons/default.png"
        };
    }


    private void ToggleSensorSelect()
    {
        ShowSensorSelect = !ShowSensorSelect;
    }


    private string GetActivityLabel(ActivityDto activity)
    {
        return activity.Name;
    }

    private string GetActivityValue(ActivityDto activity)
    {
        return activity.Id.ToString();
    }

    private async Task OnActivitySelected(ActivityDto activity)
    {
        SelectedActivity = activity;
        await SelectedActivityChanged.InvokeAsync(activity);
    }

    private string GetActivityIconUrl(ActivityDto activity)
    {
        return GetActivityImageUrl(activity.Id, "dark");
    }

    private string GetSensorLabel(BluetoothDeviceDto sensor)
    {
        return sensor.Name;
    }

    private string GetSensorValue(BluetoothDeviceDto sensor)
    {
        return sensor.Id;
    }

    private async Task OnSensorSelected(BluetoothDeviceDto sensor)
    {
        SelectedSensor = sensor;
        SelectedSensorId = sensor.Id;
        await OnSelectedSensorChanged.InvokeAsync(sensor);
        ShowSensorSelect = false;
    }
}
