<!-- Usings -->
@using Microsoft.Maui.ApplicationModel
@using StriveUp.Shared.DTOs
@using StriveUp.Shared.DTOs.Activity
@using StriveUp.Shared.Helpers

<!-- Injections -->
@inject IAppSettingsService AppSettingsService
@inject IJSRuntime JSRuntime
@inject IBleHeartRateService BleHeartRateService
@inject IProfileService ProfileService

<div class="text-center my-4">
    @if (!IsTracking && !IsPaused)
    {
        <div class="mb-4 d-flex align-items-center justify-content-center gap-4">
            <div class="position-relative">
                <img src="@ActivityUtils.GetActivityImageUrl(SelectedActivity.Name ?? "run", "dark")"
                     alt="Activity Icon"
                     class="activity-image rounded-circle shadow-lg border border-2 border-primary p-2"
                     @onclick="() => ShowActivitySelect = true" />
                <div class="text-muted small mt-2">Select Activity</div>
            </div>

            <div class="position-relative">
                <i class="sensor-icon fas fa-heartbeat text-danger shadow-lg rounded-circle p-3 bg-white border border-2"
                   @onclick="CheckAndToggleSensorModal"></i>
                <div class="text-muted small mt-2">Select Sensor</div>
            </div>
        </div>

        <button class="btn btn-warning btn-lg px-5 shadow-sm" @onclick="OnStartClick">
            <i class="fas fa-play me-2"></i>Start Activity
        </button>
    }
    else if (IsPaused)
    {
        <div class="d-flex justify-content-center gap-3">
            <button class="btn btn-success px-4 shadow-sm" @onclick="OnResumeClick">
                <i class="fas fa-play-circle me-2"></i>Resume
            </button>
            <button class="btn btn-danger px-4 shadow-sm" @onclick="OnFinishClick">
                <i class="fas fa-flag-checkered me-2"></i>Finish
            </button>
        </div>
    }
    else
    {
        <button class="btn btn-danger btn-lg px-5 shadow-sm" @onclick="OnStopClick">
            <i class="fas fa-stop me-2"></i>Stop Activity
        </button>
    }
</div>


<GenericSelectModal TItem="ActivityDto"
                    Show="@ShowActivitySelect"
                    ShowChanged="@((bool val) => ShowActivitySelect = val)"
                    Label="Select an Activity"
                    Options="AvailableActivities"
                    SelectedValue="SelectedActivity"
                    SelectedValueChanged="OnActivitySelected"
                    GetLabel="GetActivityLabel"
                    GetValue="GetActivityValue"
                    GetIconUrl="GetActivityIconUrl">
</GenericSelectModal>

<GenericSelectModal TItem="BluetoothDeviceDto"
                    Show="@ShowSensorSelect"
                    ShowChanged="@((bool val) => ShowSensorSelect = val)"
                    Label="Select a Sensor"
                    Options="AvailableSensors"
                    SelectedValue="SelectedSensor"
                    SelectedValueChanged="OnSensorSelected"
                    GetLabel="GetSensorLabel"
                    GetValue="GetSensorValue">
                    <NoDataTemplate>
                        <div class="text-center p-4 text-muted fst-italic">
                            No sensors found. Please make sure your Bluetooth device is on and discoverable.
                        </div>
                    </NoDataTemplate>
</GenericSelectModal>



@code {
    [Parameter] public List<ActivityDto> AvailableActivities { get; set; } = new();
    [Parameter] public ActivityDto SelectedActivity { get; set; } = new();
    [Parameter] public bool IsTracking { get; set; }
    [Parameter] public bool IsPaused { get; set; }

    [Parameter] public EventCallback OnStartClick { get; set; }
    [Parameter] public EventCallback OnStopClick { get; set; }
    [Parameter] public EventCallback OnResumeClick { get; set; }
    [Parameter] public EventCallback OnFinishClick { get; set; }
    [Parameter] public EventCallback<BluetoothDeviceDto> OnSelectedSensorChanged { get; set; }
    [Parameter] public EventCallback<ActivityDto> SelectedActivityChanged { get; set; }

    private string SelectedSensorId { get; set; } = "";
    private BluetoothDeviceDto? SelectedSensor { get; set; }
    private List<BluetoothDeviceDto> AvailableSensors { get; set; } = new();
    private bool ShowActivitySelect { get; set; } = false;
    private bool ShowSensorSelect { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        var config = await ProfileService.GetUserConfig();

        if (!string.IsNullOrEmpty(config.SensorId))
        {
            SelectedSensor = AvailableSensors.FirstOrDefault(s => s.Id == config.SensorId);
        }
    }

    private async Task CheckAndToggleSensorModal()
    {
        var status = await Permissions.CheckStatusAsync<Permissions.Bluetooth>();

        if (status != PermissionStatus.Granted)
        {
            status = await Permissions.RequestAsync<Permissions.Bluetooth>();
        }

        if (status != PermissionStatus.Granted)
        {
            bool openSettings = await JSRuntime.InvokeAsync<bool>(
                "confirm",
                "Bluetooth permission is required to select a sensor. Would you like to open app settings to enable it?"
            );

            if (openSettings)
            {
                AppSettingsService.OpenAppSettings();
            }

            ShowSensorSelect = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        AvailableSensors = BleHeartRateService.GetAvailableDevicesAsync();
        ShowSensorSelect = true;
        await InvokeAsync(StateHasChanged);
    }


    private void ToggleSensorSelect()
    {
        ShowSensorSelect = !ShowSensorSelect;
    }


    private string GetActivityLabel(ActivityDto activity)
    {
        return activity.Name;
    }

    private string GetActivityValue(ActivityDto activity)
    {
        return activity.Id.ToString();
    }

    private async Task OnActivitySelected(ActivityDto activity)
    {
        SelectedActivity = activity;
        await SelectedActivityChanged.InvokeAsync(activity);
    }

    private string GetActivityIconUrl(ActivityDto activity)
    {
        return ActivityUtils.GetActivityImageUrl(activity.Name, "dark");
    }

    private string GetSensorLabel(BluetoothDeviceDto sensor)
    {
        return sensor.Name;
    }

    private string GetSensorValue(BluetoothDeviceDto sensor)
    {
        return sensor.Id;
    }

    private async Task OnSensorSelected(BluetoothDeviceDto sensor)
    {
        SelectedSensor = sensor;
        SelectedSensorId = sensor.Id;
        await ProfileService.UpdateUserConfig(new UpdateUserConfigDto { SensorId = sensor.Id, SensorName = sensor.Name });
        await OnSelectedSensorChanged.InvokeAsync(sensor);
        ShowSensorSelect = false;
    }
}
