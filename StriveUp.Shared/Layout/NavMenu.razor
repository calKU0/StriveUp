@inject IMedalService MedalService
@inject IPlatformService PlatformService
@inject NavigationManager Navigation
@inject IMedalStateService MedalState


<div class="d-block d-md-none">
    <Header PageTitle="@pageTitle"></Header>
</div>

@if (!shouldHide)
{
    <!-- Desktop Navbar (fixed top) -->
    <nav class="navbar fixed-top d-none d-md-flex">
        <div class="container-fluid d-flex justify-content-between align-items-center px-3">
            <!-- Left Section -->
            <div class="d-flex align-items-center">
                <a class="navbar-brand me-3" href="">
                    <img class="logo-image img-fluid" src="images/StriveUp-logo-light.png" alt="Logo" />
                </a>
                <NavLink class="nav-link me-3 d-flex flex-column align-items-center" href="" Match="NavLinkMatch.All">
                    <i class="fas fa-home icon"></i>
                    <span class="small-text">Home</span>
                </NavLink>
                <NavLink class="nav-link me-3 d-flex flex-column align-items-center" href="feed">
                    <i class="fas fa-rss icon"></i>
                    <span class="small-text">Feed</span>
                </NavLink>
                @if (PlatformService.IsNativeApp())
                {
                    <NavLink class="nav-link me-3 d-flex flex-column align-items-center" href="tracking">
                        <i class="fas fa-running icon"></i>
                        <span class="small-text">Activity</span>
                    </NavLink>
                }
                <div class="position-relative">
                    <NavLink class="nav-link text-center d-flex flex-column align-items-center" href="medals">
                        <div class="position-relative">
                            <i class="fas fa-medal icon"></i>
                            @if (MedalState.MedalsToClaim > 0)
                            {
                                <span class="notification-count badge bg-danger position-absolute top-0 start-100 translate-middle rounded-circle">
                                    @MedalState.MedalsToClaim
                                </span>
                            }
                        </div>
                        <span class="small-text">Medals</span>
                    </NavLink>
                </div>
            </div>

            <!-- Right Section -->
            <div class="d-flex align-items-center">
                <SearchIcon Class="nav-link d-flex align-items-center justify-content-center"></SearchIcon>
                <BellIcon Class="nav-link d-flex align-items-center justify-content-center"></BellIcon>
                <NavLink href="/settings"><i class="icon-header nav-link d-flex align-items-center justify-content-center fas fa-cog text-dark"></i></NavLink>
                <NavLink class="nav-link d-flex flex-column align-items-center" href="profile">
                    <i class="fas fa-user icon"></i>
                    <span class="small-text">Profile</span>
                </NavLink>
            </div>
        </div>
    </nav>

    <!-- Mobile Navbar (fixed bottom) -->
    <nav class="navbar fixed-bottom d-flex d-md-none">
        <div class="container-fluid d-flex justify-content-around align-items-center px-2">
            <NavLink class="d-none nav-link text-center d-flex flex-column align-items-center" href="" Match="NavLinkMatch.All">
                <i class="fas fa-home icon"></i>
                <span class="small-text">Home</span>
            </NavLink>
            <NavLink class="nav-link text-center d-flex flex-column align-items-center" href="feed">
                <i class="fas fa-rss icon"></i>
                <span class="small-text">Feed</span>
            </NavLink>
            @if (PlatformService.IsNativeApp())
            {
                <NavLink class="nav-link text-center d-flex flex-column align-items-center" href="tracking">
                    <i class="fas fa-running icon"></i>
                    <span class="small-text">Activity</span>
                </NavLink>
            }
            <div class="position-relative">
                <NavLink class="nav-link text-center d-flex flex-column align-items-center" href="medals">
                    <div class="position-relative">
                        <i class="fas fa-medal icon"></i>
                        @if (MedalState.MedalsToClaim > 0)
                        {
                            <span class="notification-count badge bg-danger position-absolute top-0 start-100 translate-middle rounded-circle">
                                @MedalState.MedalsToClaim
                            </span>
                        }
                    </div>
                    <span class="small-text">Medals</span>
                </NavLink>
            </div>
            <NavLink class="nav-link text-center d-flex flex-column align-items-center" href="profile">
                <i class="fas fa-user icon"></i>
                <span class="small-text">Profile</span>
            </NavLink>
        </div>
    </nav>
}
@code {
    private int medalsToClaim = 0;
    bool shouldHide = false;
    string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        MedalState.OnChange += StateHasChanged;
        var count = await MedalService.GetMedalsToClaimCountAsync();
        MedalState.SetMedalsCount(count);
        Navigation.LocationChanged += OnLocationChanged;

        pageTitle = GetPageName();
        await LoadMedalsCount();
    }


    private async Task LoadMedalsCount()
    {
        medalsToClaim = await MedalService.GetMedalsToClaimCountAsync();
        StateHasChanged();
    }

    // Method to decrement the medals count when a medal is claimed
    public void DecrementMedalsCount()
    {
        if (medalsToClaim > 0)
        {
            medalsToClaim--;
            StateHasChanged();  // Ensure the UI updates with the new medal count
        }
    }
    public void Dispose()
    {
        MedalState.OnChange -= StateHasChanged;
    }

    private bool ShouldHideNavbar()
    {
        pageTitle = GetPageName();

        if (PlatformService.IsNativeApp() && (pageTitle == "Login " || pageTitle == "Register" || pageTitle == "Tracking" || pageTitle == "Comments" || pageTitle == "Search" || pageTitle == "Settings"))
        {
            return true;
        }
        return false;  // Show navbar on all other pages
    }

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        shouldHide = ShouldHideNavbar();
        StateHasChanged();
    }

    private string GetPageName()
    {
        var uri = Navigation.Uri;
        var segments = new Uri(uri).Segments;
        var pageName = segments.LastOrDefault()?.TrimEnd('/');

        return CapitalizeFirstLetter(String.IsNullOrEmpty(pageName) ? "home" : pageName);
    }

    private string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        // Capitalize the first letter and keep the rest of the string unchanged
        return char.ToUpper(input[0]) + input.Substring(1).ToLower();
    }
}