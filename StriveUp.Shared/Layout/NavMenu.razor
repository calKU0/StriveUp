@using System.Security.Claims
@inject IMedalService MedalService
@inject IPlatformService PlatformService
@inject IMedalStateService MedalState
@inject IProfileService ProfileService
@inject NavigationManager Navigation
@inject ICustomAuthStateProvider AuthStateProvider


<div class="d-block d-md-none">
    <Header PageTitle="@pageTitle" ShouldHide="shouldHide"></Header>
</div>

    <!-- Desktop Navbar (fixed top) -->
    <nav class="navbar fixed-top d-none d-md-flex">
        <div class="container-fluid d-flex justify-content-between align-items-center px-3">
            <!-- Left Section -->
            <div class="d-flex align-items-center">
                <a class="navbar-brand me-3" href="">
                    <img class="logo-image img-fluid" src="images/StriveUp-logo-light.png" alt="Logo" />
                </a>
                <NavLink class="nav-link me-3 d-flex flex-column align-items-center justify-content-center" href="" Match="NavLinkMatch.All">
                    <div class="d-flex justify-content-center align-items-center" style="height: 24px;">
                        <i class="fas fa-home fa-lg"></i>
                    </div>
                    <small class="mt-1">Home</small>
                </NavLink>
                <NavLink class="nav-link me-3 d-flex flex-column align-items-center justify-content-center" href="feed">
                    <div class="d-flex justify-content-center align-items-center" style="height: 24px;">
                        <i class="fas fa-rss fa-lg"></i>
                    </div>
                    <small class="mt-1">Feed</small>
                </NavLink>
                @if (PlatformService.IsNativeApp())
                {
                    <NavLink class="nav-link me-3 d-flex flex-column align-items-center justify-content-center" href="record">
                        <div class="d-flex justify-content-center align-items-center" style="height: 24px;">
                            <i class="fas fa-running fa-lg"></i>
                        </div>
                        <small class="mt-1">Activity</small>
                    </NavLink>
                }
                <NavLink class="nav-link me-3 d-flex flex-column align-items-center justify-content-center position-relative" href="medals">
                    <div class="d-flex justify-content-center align-items-center position-relative" style="height: 24px;">
                        <i class="fas fa-medal fa-lg"></i>
                        @if (MedalState.MedalsToClaim > 0)
                        {
                            <span class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-circle">
                                @MedalState.MedalsToClaim
                            </span>
                        }
                    </div>
                    <small class="mt-1">Medals</small>
                </NavLink>

                <NavLink class="nav-link me-3 text-center d-flex flex-column align-items-center justify-content-center" href="leaderboards">
                    <div class="d-flex justify-content-center align-items-center" style="height: 24px;">
                        <i class="fas fa-crown fa-lg"></i>
                    </div>
                    <small class="mt-1">Top</small>
                </NavLink>
            </div>

            <!-- Right Section -->
            <div class="d-flex align-items-center">
                <SearchIcon Class="nav-link d-flex align-items-center justify-content-center"></SearchIcon>
                <div class="d-flex align-items-center position-relative">
                <BellIcon></BellIcon>
                </div>
                <NavLink href="/settings"><i class="icon-header nav-link d-flex align-items-center justify-content-center fas fa-cog text-dark"></i></NavLink>
                <NavLink class="nav-link d-flex flex-column align-items-center" href="profile">
                    <img src="@userAvatarUrl" alt="User Avatar" class="avatar-icon" />
                </NavLink>
            </div>
        </div>
    </nav>

@if (!shouldHide)
{
    <!-- Mobile Navbar (fixed bottom) -->
    <nav class="navbar fixed-bottom d-flex d-md-none">
        <div class="container-fluid p-0 m-0 d-flex justify-content-around align-items-center">
            <NavLink class="nav-link d-flex flex-column align-items-center justify-content-center position-relative" href="" Match="NavLinkMatch.All">
                <span class="nav-slider"></span>
                <div style="height: 24px;">
                    <i class="fas fa-home fa-lg"></i>
                </div>
                <small class="mt-1">Home</small>
            </NavLink>

            @if (!PlatformService.IsNativeApp())
            {
                <NavLink class="nav-link d-flex flex-column align-items-center justify-content-center position-relative" href="feed">
                    <span class="nav-slider"></span>
                    <div style="height: 24px;">
                        <i class="fas fa-rss fa-lg"></i>
                    </div>
                    <small class="mt-1">Feed</small>
                </NavLink>
            }


            <NavLink class="nav-link d-flex flex-column align-items-center justify-content-center position-relative" href="medals">
                <span class="nav-slider"></span>
                <div style="height: 24px; position: relative;">
                    <i class="fas fa-medal fa-lg"></i>
                    @if (MedalState.MedalsToClaim > 0)
                    {
                        <span class="badge bg-danger position-absolute start-100 translate-middle rounded-circle badge-small"
                              style="top: 3px;">
                            @MedalState.MedalsToClaim
                        </span>
                    }
                </div>
                <small class="mt-1">Medals</small>
            </NavLink>

            @if (PlatformService.IsNativeApp())
            {
                <NavLink class="nav-link d-flex flex-column align-items-center justify-content-center position-relative" href="record">
                    <span class="nav-slider"></span>
                    <div style="height: 24px;" class="d-flex align-items-center justify-content-center">
                        <i class="bi bi-record2" style="font-size: 2.25rem; line-height: 1; vertical-align: middle;"></i>
                    </div>
                    <small class="mt-1">Record</small>
                </NavLink>
            }

            <NavLink class="nav-link d-flex flex-column align-items-center justify-content-center position-relative" href="leaderboards">
                <span class="nav-slider"></span>
                <div style="height: 24px;">
                    <i class="fas fa-crown fa-lg"></i>
                </div>
                <small class="mt-1">Top</small>
            </NavLink>

            <NavLink class="nav-link d-flex flex-column align-items-center justify-content-center position-relative" href="profile">
                <span class="nav-slider" style="top:-5px"></span>
                <img src="@userAvatarUrl" alt="User Avatar" class="avatar-icon" />
            </NavLink>
        </div>
    </nav>

}
@code {
    private int medalsToClaim = 0;
    private string userAvatarUrl = "images/icons/user.png";
    bool shouldHide = false;
    string pageTitle;
    private readonly HashSet<string> PagesToHideNavbar = new()
    {
        "Login",
        "Register",
        "Record",
        "Comments",
        "Search",
        "Settings",
        "Privacy control",
        "Terms of service",
        "Privacy policy",
        "Edit activity",
        "Edit profile",
        "Notifications",
        "Synchronize",
        "Followers",
        "Following",
        "Goals",
        "Add goal",
        "Tos",
        "Add activity",
    };

    protected override async Task OnInitializedAsync()
    {
        MedalState.OnChange += StateHasChanged;
        Navigation.LocationChanged += OnLocationChanged;

        pageTitle = GetPageName();
        await LoadMedalsCount();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var count = await MedalService.GetMedalsToClaimCountAsync();
                MedalState.SetMedalsCount(count);
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();

                var currentUser = authState.User;
                var userName = currentUser.FindFirst(ClaimTypes.Name)?.Value;

                var user = await ProfileService.GetSimpleUserData(userName);
                if (user != null)
                {
                    userAvatarUrl = user.Avatar ?? "images/icons/user.png";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
            finally
            {
                StateHasChanged();
            }
        }
    }


    private async Task LoadMedalsCount()
    {
        medalsToClaim = await MedalService.GetMedalsToClaimCountAsync();
        StateHasChanged();
    }

    // Method to decrement the medals count when a medal is claimed
    public void DecrementMedalsCount()
    {
        if (medalsToClaim > 0)
        {
            medalsToClaim--;
            StateHasChanged();  // Ensure the UI updates with the new medal count
        }
    }
    public void Dispose()
    {
        MedalState.OnChange -= StateHasChanged;
    }

    private bool ShouldHideNavbar()
    {
        return PagesToHideNavbar.Contains(pageTitle);
    }

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        pageTitle = GetPageName();
        shouldHide = ShouldHideNavbar();
        StateHasChanged();
    }

    private string GetPageName()
    {
        string uri = Navigation.Uri;
        var segments = new Uri(uri).Segments;

        // Check if there's at least one segment after the domain (segments[0] is always "/")
        if (segments.Length > 1)
        {
            // segments[1] will be the main page segment, e.g. "activity/" or "feed/"
            string mainSegment = segments[1].TrimEnd('/').Replace("-"," ");
            mainSegment = mainSegment == "terms of service" ? "TOS" : mainSegment;
            return CapitalizeFirstLetter(mainSegment);
        }

        // If no segments, default to "home"
        return "Home";
    }

    private string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        // Capitalize the first letter and keep the rest of the string unchanged
        return char.ToUpper(input[0]) + input.Substring(1).ToLower();
    }
}