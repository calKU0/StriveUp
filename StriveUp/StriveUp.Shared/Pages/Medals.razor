@page "/medals"
@using StriveUp.Shared.Components
@using StriveUp.Shared.DTOs
@inject IMedalsService MedalService
@inject NavigationManager Navigation

<div class="container my-4">
    <h2 class="text-center mb-4">Your Medals</h2>

    <div class="row">
        <div class="col-md-6">
            <h4 class="text-success">Achieved Medals</h4>
            <div class="row g-3">
                @foreach (var medal in achievedMedals)
                {
                    <div class="col-6 col-sm-4 col-md-6">
                        <Medal MedalDto="@medal" OnMedalClick="@(() => ShowMedalDetails(medal))" />
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6 pt-3">
            <h4 class="text-secondary">Not Achieved Medals</h4>
            <div class="row g-3">
                @foreach (var medal in notAchievedMedals)
                {
                    <div class="col-6 col-sm-4 col-md-6">
                        <Medal MedalDto="@medal" OnMedalClick="@(() => ShowMedalDetails(medal))" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<Modal @bind-IsVisible="IsVisible">
    @if (selectedMedal != null)
    {
        <div class="modal-body text-center">
            <h5 class="modal-title">@selectedMedal.Name</h5>
            <img src="@selectedMedal.ImageUrl" alt="@selectedMedal.Name" class="img-fluid rounded shadow-sm mb-3" style="max-height: 200px;" />
            <p><strong>Description:</strong> @selectedMedal.Description</p>
            <p><strong>Target:</strong> @selectedMedal.TargetValue km</p>
            <p><strong>Level:</strong> @selectedMedal.Level</p>
            <p><strong>Frequency:</strong> @selectedMedal.Frequency</p>
        </div>
    }
</Modal>


@code {
    private List<MedalDto> achievedMedals = new();
    private List<MedalDto> notAchievedMedals = new();
    private MedalDto selectedMedal;
    private bool IsVisible;

    protected override async Task OnInitializedAsync()
    {
        var allMedals = await MedalService.GetAllMedalsAsync();
        var achievedMedals = await MedalService.GetUserMedalsAsync();
        var achievedIds = achievedMedals.Select(m => m.Id).ToHashSet();
        notAchievedMedals = allMedals
            .Where(m => !achievedIds.Contains(m.Id))
            .ToList();
    }

    private void ShowMedalDetails(MedalDto medal)
    {
        selectedMedal = medal;
        ShowMedalDetailsModal(true);
    }

    private void ShowMedalDetailsModal(bool isVisible)
    {
        IsVisible = true;
        StateHasChanged();
    }

    private void OnMedalDetailsModalChanged(bool isVisible)
    {
        // Handle modal visibility state change
    }
}
