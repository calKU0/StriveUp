@page "/profile"
@inject IAuthService AuthService
@inject ICustomAuthStateProvider AuthStateProvider
@inject HttpClient Http
@inject NavigationManager Navigation
@using StriveUp.Shared.DTOs
@using System.Security.Claims

<PageTitle>User Profile</PageTitle>

<div class="container-fluid">
    @* Loading and error states *@
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (errorMessage != null)
    {
        <p class="text-danger">@errorMessage</p>
    }
    else
    {
        <h3>User Profile</h3>

        @* Profile Details *@
        <div>
            <p><strong>Name:</strong> @userProfile.FirstName</p>
            <p><strong>Email:</strong> @userProfile.Email</p>
            <p><strong>Username:</strong> @userProfile.UserName</p>

            @if (isEditable)
            {
                <button @onclick="ToggleEditMode">Edit</button>
            }

            @if (isEditing)
            {
                <EditProfileComponent UserProfile="@userProfile" OnSave="OnProfileSaved" />
            }
        </div>

        @* Display Activities *@
        <h4>Activities</h4>
        @if (userProfile.Activities != null && userProfile.Activities.Any())
        {
            <ul>
                @foreach (var activity in userProfile.Activities)
                {
                    <li>
                        <strong>@activity.Title</strong> - @activity.DurationMinutes minutes
                        @if (!string.IsNullOrEmpty(activity.Description))
                        {
                            <p><em>@activity.Description</em></p>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No activities found.</p>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private UserProfileDto userProfile = new();
    private bool isEditable = false;
    private bool isEditing = false;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            if (currentUser.Identity?.IsAuthenticated ?? false)
            {
                // Get the current user's profile information from the API
                userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                var response = await Http.GetFromJsonAsync<UserProfileDto>($"user/profile/{userId}");

                if (response != null)
                {
                    userProfile = response;
                    isEditable = userProfile.UserName == currentUser.Identity?.Name;
                }
                else
                {
                    errorMessage = "Could not load user profile.";
                }
            }
            else
            {
                errorMessage = "You are not authenticated.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleEditMode()
    {
        isEditing = !isEditing;
    }

    private void NavigateToEditProfile()
    {
        Navigation.NavigateTo("/edit-profile");
    }

    private void OnProfileSaved(UserProfileDto updatedProfile)
    {
        userProfile = updatedProfile;
        isEditing = false;
    }
}
